Using PyTorch version: 1.10.1+cu102  Device: cpu
------ PYTHON SRC -------
[91m
*****dumping python ast****
Module(body=[FunctionDef(
  name='forward',
  args=arguments(
    args=[
      arg(
        arg='self',
        annotation=None),
      arg(
        arg='x',
        annotation=None),
      arg(
        arg='x1',
        annotation=None)],
    vararg=None,
    kwonlyargs=[],
    kw_defaults=[],
    kwarg=None,
    defaults=[]),
  body=[
    Assign(
      targets=[Name(
        id='y',
        ctx=Store())],
      value=Call(
        func=Attribute(
          value=Name(
            id='torch',
            ctx=Load()),
          attr='matmul',
          ctx=Load()),
        args=[
          Name(
            id='x',
            ctx=Load()),
          Name(
            id='x1',
            ctx=Load())],
        keywords=[])),
    Assign(
      targets=[Name(
        id='y1',
        ctx=Store())],
      value=Call(
        func=Attribute(
          value=Name(
            id='torch',
            ctx=Load()),
          attr='tanh',
          ctx=Load()),
        args=[Name(
          id='y',
          ctx=Load())],
        keywords=[])),
    Return(value=Name(
      id='y1',
      ctx=Load()))],
  decorator_list=[
    Call(
      func=Name(
        id='backend',
        ctx=Load()),
      args=[Str(s='IREE')],
      keywords=[]),
    Call(
      func=Name(
        id='annotate_arguments',
        ctx=Load()),
      args=[List(
        elts=[
          NameConstant(value=None),
          Tuple(
            elts=[
              List(
                elts=[
                  Num(n=32),
                  Num(n=784)],
                ctx=Load()),
              Attribute(
                value=Name(
                  id='torch',
                  ctx=Load()),
                attr='float32',
                ctx=Load())],
            ctx=Load()),
          Tuple(
            elts=[
              List(
                elts=[
                  Num(n=784),
                  Num(n=50)],
                ctx=Load()),
              Attribute(
                value=Name(
                  id='torch',
                  ctx=Load()),
                attr='float32',
                ctx=Load())],
            ctx=Load())],
        ctx=Load())],
      keywords=[])],
  returns=None)])[0m[95m
*****dumping python code*****


@backend('IREE')
@annotate_arguments([None, ([32, 784], torch.float32), ([784, 50], torch.float32)])
def forward(self, x, x1):
    y = torch.matmul(x, x1)
    y1 = torch.tanh(y)
    return y1
[0m
*******************

_pass_table == >  {'IdenticalPastPass': '0', 'StatementConversionPass': '1', 'AnnotateCompletionPass': '2'}
pass_manager_base::schedule_passes

====== enter AnnotateCompletionPass =====

<chopper.pass_manager.transformers.annotate_types_visitor.AnnotateTypesVisitor object at 0x7f5eec3c1b38> ::visit_FunctionDef

{}
{'shape': [32, 784], 'dtype': 'f32'}
x
{'shape': [784, 50], 'dtype': 'f32'}
x1
<chopper.pass_manager.transformers.annotate_types_visitor.AnnotateTypesVisitor object at 0x7f5eec3c1b38> ::visit_Assign

Call(
  func=Attribute(
    value=Name(
      id='torch',
      ctx=Load()),
    attr='matmul',
    ctx=Load()),
  args=[
    Name(
      id='x',
      ctx=Load()),
    Name(
      id='x1',
      ctx=Load())],
  keywords=[])
warning: redefine of value x with, newtype = RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=784)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))
warning: redefine of value x1 with, newtype = RankedTensorType(dimensions=[Dimension(value=784), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))
{'from_lhs_tensor': RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=784)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>)), 'from_rhs_tensor': RankedTensorType(dimensions=[Dimension(value=784), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>)), 'bin_op': 'matmul'}
y
<chopper.pass_manager.transformers.annotate_types_visitor.AnnotateTypesVisitor object at 0x7f5eec3c1b38> ::visit_Assign

Call(
  func=Attribute(
    value=Name(
      id='torch',
      ctx=Load()),
    attr='tanh',
    ctx=Load()),
  args=[Name(
    id='y',
    ctx=Load())],
  keywords=[])
y1
<chopper.pass_manager.transformers.annotate_types_visitor.AnnotateTypesVisitor object at 0x7f5eec3c1b38> ::visit_Return

>=============================<
>==== Forward ValueSymbolTable Summary ====<
>=============================<

Count of Symbol Entries = 4
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=784)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=784), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #2 
=> SsaId(value='y', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #3 
=> SsaId(value='y1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Forward ValueSymbolTable Summary ==<
>=============================<

>=============================<
>==== Autodiff ValueSymbolTable Summary ====<
>=============================<

Count of Symbol Entries = 4
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=784)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=784), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #2 
=> SsaId(value='y', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #3 
=> SsaId(value='y1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Autodiff ValueSymbolTable Summary ==<
>=============================<

>=============================<
>==== Saved Activation Table Summary ====<
>=============================<

Count of Symbol Entries = 3
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x-act', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=784)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1-act', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=784), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #2 
=> SsaId(value='y-act', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Saved Activation Table Summary ==<
>=============================<

>=============================<
>==== Autodiff Func Args Table Summary ====<
>=============================<

Count of Symbol Entries = 1
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='y1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Autodiff Func Args Table Summary ==<
>=============================<

>=============================<
>==== Autodiff Func Rets Table Summary ====<
>=============================<

Count of Symbol Entries = 2
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=784)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=784), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Autodiff Func Rets Table Summary ==<
>=============================<

pass_manager_base::schedule_passes
runrun pass pass
%y = atir.matmul %x , %x1 : (tensor<32x784xf32>, tensor<784x50xf32>) -> tensor<32x50xf32>
{'shape': (2,), 'dtype': 'i32'}
x_0
{'from_unary_tensor': RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=784)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>)), 'transpose_order': [1, 0]}
{'from_unary_tensor': RankedTensorType(dimensions=[Dimension(value=784), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>)), 'transpose_order': [1, 0]}
x-0
x1-0
y_0
{}
y_1
y_2
y-0
>=============================<
>==== Forward ValueSymbolTable Summary ====<
>=============================<

Count of Symbol Entries = 4
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=784)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=784), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #2 
=> SsaId(value='y', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #3 
=> SsaId(value='y1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Forward ValueSymbolTable Summary ==<
>=============================<

>=============================<
>==== Autodiff ValueSymbolTable Summary ====<
>=============================<

Count of Symbol Entries = 14
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=784)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=784), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #2 
=> SsaId(value='y', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #3 
=> SsaId(value='y1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #4 
=> SsaId(value='x_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=2)], element_type=SignlessIntegerType(width=32))

Symbol #5 
=> SsaId(value='x-act_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=784), Dimension(value=32)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #6 
=> SsaId(value='x1-act_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=784)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #7 
=> SsaId(value='x-0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=784)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #8 
=> SsaId(value='x1-0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=784), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #9 
=> SsaId(value='y-act_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #10 
=> SsaId(value='y_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #11 
=> SsaId(value='y_1', op_no=None) 
=> UnitTensorType(element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #12 
=> SsaId(value='y_2', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #13 
=> SsaId(value='y-0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Autodiff ValueSymbolTable Summary ==<
>=============================<

>=============================<
>==== Saved Activation Table Summary ====<
>=============================<

Count of Symbol Entries = 3
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x-act', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=784)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1-act', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=784), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #2 
=> SsaId(value='y-act', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Saved Activation Table Summary ==<
>=============================<

>=============================<
>==== Autodiff Func Args Table Summary ====<
>=============================<

Count of Symbol Entries = 1
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='y1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Autodiff Func Args Table Summary ==<
>=============================<

>=============================<
>==== Autodiff Func Rets Table Summary ====<
>=============================<

Count of Symbol Entries = 2
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=784)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=784), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Autodiff Func Rets Table Summary ==<
>=============================<

>=============================<
>==== Forward ValueSymbolTable Summary ====<
>=============================<

Count of Symbol Entries = 4
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=784)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=784), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #2 
=> SsaId(value='y', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #3 
=> SsaId(value='y1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Forward ValueSymbolTable Summary ==<
>=============================<

>=============================<
>==== Autodiff ValueSymbolTable Summary ====<
>=============================<

Count of Symbol Entries = 14
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=784)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=784), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #2 
=> SsaId(value='y', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #3 
=> SsaId(value='y1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #4 
=> SsaId(value='x_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=2)], element_type=SignlessIntegerType(width=32))

Symbol #5 
=> SsaId(value='x-act_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=784), Dimension(value=32)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #6 
=> SsaId(value='x1-act_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=784)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #7 
=> SsaId(value='x-0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=784)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #8 
=> SsaId(value='x1-0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=784), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #9 
=> SsaId(value='y-act_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #10 
=> SsaId(value='y_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #11 
=> SsaId(value='y_1', op_no=None) 
=> UnitTensorType(element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #12 
=> SsaId(value='y_2', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #13 
=> SsaId(value='y-0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Autodiff ValueSymbolTable Summary ==<
>=============================<

>=============================<
>==== Saved Activation Table Summary ====<
>=============================<

Count of Symbol Entries = 3
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x-act', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=784)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1-act', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=784), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #2 
=> SsaId(value='y-act', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Saved Activation Table Summary ==<
>=============================<

>=============================<
>==== Autodiff Func Args Table Summary ====<
>=============================<

Count of Symbol Entries = 1
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='y1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Autodiff Func Args Table Summary ==<
>=============================<

>=============================<
>==== Autodiff Func Rets Table Summary ====<
>=============================<

Count of Symbol Entries = 2
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=784)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=784), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Autodiff Func Rets Table Summary ==<
>=============================<

>=============================<
>==== Forward ValueSymbolTable Summary ====<
>=============================<

Count of Symbol Entries = 4
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=784)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=784), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #2 
=> SsaId(value='y', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #3 
=> SsaId(value='y1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Forward ValueSymbolTable Summary ==<
>=============================<

>=============================<
>==== Autodiff ValueSymbolTable Summary ====<
>=============================<

Count of Symbol Entries = 14
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=784)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=784), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #2 
=> SsaId(value='y', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #3 
=> SsaId(value='y1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #4 
=> SsaId(value='x_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=2)], element_type=SignlessIntegerType(width=32))

Symbol #5 
=> SsaId(value='x-act_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=784), Dimension(value=32)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #6 
=> SsaId(value='x1-act_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=784)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #7 
=> SsaId(value='x-0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=784)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #8 
=> SsaId(value='x1-0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=784), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #9 
=> SsaId(value='y-act_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #10 
=> SsaId(value='y_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #11 
=> SsaId(value='y_1', op_no=None) 
=> UnitTensorType(element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #12 
=> SsaId(value='y_2', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #13 
=> SsaId(value='y-0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Autodiff ValueSymbolTable Summary ==<
>=============================<

>=============================<
>==== Saved Activation Table Summary ====<
>=============================<

Count of Symbol Entries = 3
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x-act', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=784)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1-act', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=784), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #2 
=> SsaId(value='y-act', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Saved Activation Table Summary ==<
>=============================<

>=============================<
>==== Autodiff Func Args Table Summary ====<
>=============================<

Count of Symbol Entries = 1
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='y1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Autodiff Func Args Table Summary ==<
>=============================<

>=============================<
>==== Autodiff Func Rets Table Summary ====<
>=============================<

Count of Symbol Entries = 2
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=784)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=784), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Autodiff Func Rets Table Summary ==<
>=============================<

>=============================<
>==== Forward ValueSymbolTable Summary ====<
>=============================<

Count of Symbol Entries = 4
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=784)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=784), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #2 
=> SsaId(value='y', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #3 
=> SsaId(value='y1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Forward ValueSymbolTable Summary ==<
>=============================<

>=============================<
>==== Autodiff ValueSymbolTable Summary ====<
>=============================<

Count of Symbol Entries = 14
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=784)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=784), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #2 
=> SsaId(value='y', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #3 
=> SsaId(value='y1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #4 
=> SsaId(value='x_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=2)], element_type=SignlessIntegerType(width=32))

Symbol #5 
=> SsaId(value='x-act_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=784), Dimension(value=32)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #6 
=> SsaId(value='x1-act_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=784)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #7 
=> SsaId(value='x-0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=784)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #8 
=> SsaId(value='x1-0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=784), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #9 
=> SsaId(value='y-act_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #10 
=> SsaId(value='y_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #11 
=> SsaId(value='y_1', op_no=None) 
=> UnitTensorType(element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #12 
=> SsaId(value='y_2', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #13 
=> SsaId(value='y-0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Autodiff ValueSymbolTable Summary ==<
>=============================<

>=============================<
>==== Saved Activation Table Summary ====<
>=============================<

Count of Symbol Entries = 3
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x-act', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=784)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1-act', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=784), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #2 
=> SsaId(value='y-act', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Saved Activation Table Summary ==<
>=============================<

>=============================<
>==== Autodiff Func Args Table Summary ====<
>=============================<

Count of Symbol Entries = 1
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='y1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Autodiff Func Args Table Summary ==<
>=============================<

>=============================<
>==== Autodiff Func Rets Table Summary ====<
>=============================<

Count of Symbol Entries = 2
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=784)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=784), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Autodiff Func Rets Table Summary ==<
>=============================<

------ ATIR IR -------
module @forward_bf20a6dbab0f423ab272a90ec84a020f {
  func @forward(%x: tensor<32x784xf32>, %x1: tensor<784x50xf32>) -> (tensor<32x50xf32>, tensor<32x784xf32>, tensor<784x50xf32>, tensor<32x50xf32>) {
    %y = atir.matmul %x , %x1 : (tensor<32x784xf32>, tensor<784x50xf32>) -> tensor<32x50xf32>
    %y1 = atir.tanh %y : (tensor<32x50xf32>) -> tensor<32x50xf32>
    %x-act = atir.identity %x : (tensor<32x784xf32>) -> tensor<32x784xf32>
    %x1-act = atir.identity %x1 : (tensor<784x50xf32>) -> tensor<784x50xf32>
    %y-act = atir.identity %y : (tensor<32x50xf32>) -> tensor<32x50xf32>
    return %y1, %x-act, %x1-act, %y-act : tensor<32x50xf32>, tensor<32x784xf32>, tensor<784x50xf32>, tensor<32x50xf32>
  }
}
module @backward_bf20a6dbab0f423ab272a90ec84a020f {
  func @bpfunction(%y1: tensor<32x50xf32>, %x-act: tensor<32x784xf32>, %x1-act: tensor<784x50xf32>, %y-act: tensor<32x50xf32>) -> (tensor<32x784xf32>, tensor<784x50xf32>) {
    %y-act_0 = atir.tanh %y-act : (tensor<32x50xf32>) -> tensor<32x50xf32>
    %y_0 = atir.mul %y-act_0 , %y-act_0 : (tensor<32x50xf32>, tensor<32x50xf32>) -> tensor<32x50xf32>
    %y_1 = "tosa.const"() {value = dense<1.0> : tensor<f32>} : () -> tensor<f32>
    %y_2 = atir.sub %y_1 , %y_0 : (tensor<f32>, tensor<32x50xf32>) -> tensor<32x50xf32>
    %y-0 = atir.mul %y1 , %y_2 : (tensor<32x50xf32>, tensor<32x50xf32>) -> tensor<32x50xf32>
    %y = atir.identity %y-0 : (tensor<32x50xf32>) -> tensor<32x50xf32>
    %x_0 = "tosa.const"() {value = dense<[1, 0]> : tensor<2xi32>} : () -> tensor<2xi32>
    %x1-act_0 = "tosa.transpose" (%x1-act , %x_0) : (tensor<784x50xf32>, tensor<2xi32>) -> tensor<50x784xf32>
    %x-act_0 = "tosa.transpose" (%x-act , %x_0) : (tensor<32x784xf32>, tensor<2xi32>) -> tensor<784x32xf32>
    %x1-0 = atir.matmul %x-act_0 , %y : (tensor<784x32xf32>, tensor<32x50xf32>) -> tensor<784x50xf32>
    %x-0 = atir.matmul %y , %x1-act_0 : (tensor<32x50xf32>, tensor<50x784xf32>) -> tensor<32x784xf32>
    %x = atir.identity %x-0 : (tensor<32x784xf32>) -> tensor<32x784xf32>
    %x1 = atir.identity %x1-0 : (tensor<784x50xf32>) -> tensor<784x50xf32>
    return %x, %x1 : tensor<32x784xf32>, tensor<784x50xf32>
  }
}
------ TOSA IR -------
module @forward_bf20a6dbab0f423ab272a90ec84a020f  {
  func @forward(%arg0: tensor<32x784xf32>, %arg1: tensor<784x50xf32>) -> (tensor<32x50xf32>, tensor<32x784xf32>, tensor<784x50xf32>, tensor<32x50xf32>) {
    %0 = "tosa.reshape"(%arg0) {new_shape = [1, 32, 784]} : (tensor<32x784xf32>) -> tensor<1x32x784xf32>
    %1 = "tosa.reshape"(%arg1) {new_shape = [1, 784, 50]} : (tensor<784x50xf32>) -> tensor<1x784x50xf32>
    %2 = "tosa.matmul"(%0, %1) : (tensor<1x32x784xf32>, tensor<1x784x50xf32>) -> tensor<1x32x50xf32>
    %3 = "tosa.reshape"(%2) {new_shape = [32, 50]} : (tensor<1x32x50xf32>) -> tensor<32x50xf32>
    %4 = "tosa.tanh"(%3) : (tensor<32x50xf32>) -> tensor<32x50xf32>
    %5 = "tosa.identity"(%arg0) : (tensor<32x784xf32>) -> tensor<32x784xf32>
    %6 = "tosa.identity"(%arg1) : (tensor<784x50xf32>) -> tensor<784x50xf32>
    %7 = "tosa.identity"(%3) : (tensor<32x50xf32>) -> tensor<32x50xf32>
    return %4, %5, %6, %7 : tensor<32x50xf32>, tensor<32x784xf32>, tensor<784x50xf32>, tensor<32x50xf32>
  }
}


------ TOSA IR -------
module @backward_bf20a6dbab0f423ab272a90ec84a020f  {
  func @bpfunction(%arg0: tensor<32x50xf32>, %arg1: tensor<32x784xf32>, %arg2: tensor<784x50xf32>, %arg3: tensor<32x50xf32>) -> (tensor<32x784xf32>, tensor<784x50xf32>) {
    %0 = "tosa.const"() {value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %1 = "tosa.const"() {value = dense<[1, 0]> : tensor<2xi32>} : () -> tensor<2xi32>
    %2 = "tosa.tanh"(%arg3) : (tensor<32x50xf32>) -> tensor<32x50xf32>
    %3 = "tosa.mul"(%2, %2) {shift = 0 : i32} : (tensor<32x50xf32>, tensor<32x50xf32>) -> tensor<32x50xf32>
    %4 = "tosa.sub"(%0, %3) : (tensor<f32>, tensor<32x50xf32>) -> tensor<32x50xf32>
    %5 = "tosa.mul"(%arg0, %4) {shift = 0 : i32} : (tensor<32x50xf32>, tensor<32x50xf32>) -> tensor<32x50xf32>
    %6 = "tosa.identity"(%5) : (tensor<32x50xf32>) -> tensor<32x50xf32>
    %7 = "tosa.transpose"(%arg2, %1) : (tensor<784x50xf32>, tensor<2xi32>) -> tensor<50x784xf32>
    %8 = "tosa.transpose"(%arg1, %1) : (tensor<32x784xf32>, tensor<2xi32>) -> tensor<784x32xf32>
    %9 = "tosa.reshape"(%8) {new_shape = [1, 784, 32]} : (tensor<784x32xf32>) -> tensor<1x784x32xf32>
    %10 = "tosa.reshape"(%6) {new_shape = [1, 32, 50]} : (tensor<32x50xf32>) -> tensor<1x32x50xf32>
    %11 = "tosa.matmul"(%9, %10) : (tensor<1x784x32xf32>, tensor<1x32x50xf32>) -> tensor<1x784x50xf32>
    %12 = "tosa.reshape"(%11) {new_shape = [784, 50]} : (tensor<1x784x50xf32>) -> tensor<784x50xf32>
    %13 = "tosa.reshape"(%6) {new_shape = [1, 32, 50]} : (tensor<32x50xf32>) -> tensor<1x32x50xf32>
    %14 = "tosa.reshape"(%7) {new_shape = [1, 50, 784]} : (tensor<50x784xf32>) -> tensor<1x50x784xf32>
    %15 = "tosa.matmul"(%13, %14) : (tensor<1x32x50xf32>, tensor<1x50x784xf32>) -> tensor<1x32x784xf32>
    %16 = "tosa.reshape"(%15) {new_shape = [32, 784]} : (tensor<1x32x784xf32>) -> tensor<32x784xf32>
    %17 = "tosa.identity"(%16) : (tensor<32x784xf32>) -> tensor<32x784xf32>
    %18 = "tosa.identity"(%12) : (tensor<784x50xf32>) -> tensor<784x50xf32>
    return %17, %18 : tensor<32x784xf32>, tensor<784x50xf32>
  }
}


------ RESULTS in VULKAN GPU -------
vulkan backend inited
<built-in method items of BoundModules object at 0x7f5eec3addb0>
<class 'chopper.iree.runtime.system_api.BoundModule'>
<BoundModule <VmModule forward_bf20a6dbab0f423ab272a90ec84a020f : [forward, __init]>>
<VmFunction forward(0rr_rrrr), reflection = {}>
------ PYTHON SRC -------
[91m
*****dumping python ast****
Module(body=[FunctionDef(
  name='forward',
  args=arguments(
    args=[
      arg(
        arg='self',
        annotation=None),
      arg(
        arg='x',
        annotation=None),
      arg(
        arg='x1',
        annotation=None)],
    vararg=None,
    kwonlyargs=[],
    kw_defaults=[],
    kwarg=None,
    defaults=[]),
  body=[
    Assign(
      targets=[Name(
        id='y',
        ctx=Store())],
      value=Call(
        func=Attribute(
          value=Name(
            id='torch',
            ctx=Load()),
          attr='matmul',
          ctx=Load()),
        args=[
          Name(
            id='x',
            ctx=Load()),
          Name(
            id='x1',
            ctx=Load())],
        keywords=[])),
    Assign(
      targets=[Name(
        id='y1',
        ctx=Store())],
      value=Call(
        func=Attribute(
          value=Name(
            id='torch',
            ctx=Load()),
          attr='tanh',
          ctx=Load()),
        args=[Name(
          id='y',
          ctx=Load())],
        keywords=[])),
    Return(value=Name(
      id='y1',
      ctx=Load()))],
  decorator_list=[
    Call(
      func=Name(
        id='backend',
        ctx=Load()),
      args=[Str(s='IREE')],
      keywords=[]),
    Call(
      func=Name(
        id='annotate_arguments',
        ctx=Load()),
      args=[List(
        elts=[
          NameConstant(value=None),
          Tuple(
            elts=[
              List(
                elts=[
                  Num(n=32),
                  Num(n=50)],
                ctx=Load()),
              Attribute(
                value=Name(
                  id='torch',
                  ctx=Load()),
                attr='float32',
                ctx=Load())],
            ctx=Load()),
          Tuple(
            elts=[
              List(
                elts=[
                  Num(n=50),
                  Num(n=50)],
                ctx=Load()),
              Attribute(
                value=Name(
                  id='torch',
                  ctx=Load()),
                attr='float32',
                ctx=Load())],
            ctx=Load())],
        ctx=Load())],
      keywords=[])],
  returns=None)])[0m[95m
*****dumping python code*****


@backend('IREE')
@annotate_arguments([None, ([32, 50], torch.float32), ([50, 50], torch.float32)])
def forward(self, x, x1):
    y = torch.matmul(x, x1)
    y1 = torch.tanh(y)
    return y1
[0m
*******************

pass_manager_base::schedule_passes

====== enter AnnotateCompletionPass =====

<chopper.pass_manager.transformers.annotate_types_visitor.AnnotateTypesVisitor object at 0x7f5eec1d3e48> ::visit_FunctionDef

{}
{'shape': [32, 50], 'dtype': 'f32'}
x
{'shape': [50, 50], 'dtype': 'f32'}
x1
<chopper.pass_manager.transformers.annotate_types_visitor.AnnotateTypesVisitor object at 0x7f5eec1d3e48> ::visit_Assign

Call(
  func=Attribute(
    value=Name(
      id='torch',
      ctx=Load()),
    attr='matmul',
    ctx=Load()),
  args=[
    Name(
      id='x',
      ctx=Load()),
    Name(
      id='x1',
      ctx=Load())],
  keywords=[])
warning: redefine of value x with, newtype = RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))
warning: redefine of value x1 with, newtype = RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))
{'from_lhs_tensor': RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>)), 'from_rhs_tensor': RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>)), 'bin_op': 'matmul'}
y
<chopper.pass_manager.transformers.annotate_types_visitor.AnnotateTypesVisitor object at 0x7f5eec1d3e48> ::visit_Assign

Call(
  func=Attribute(
    value=Name(
      id='torch',
      ctx=Load()),
    attr='tanh',
    ctx=Load()),
  args=[Name(
    id='y',
    ctx=Load())],
  keywords=[])
y1
<chopper.pass_manager.transformers.annotate_types_visitor.AnnotateTypesVisitor object at 0x7f5eec1d3e48> ::visit_Return

>=============================<
>==== Forward ValueSymbolTable Summary ====<
>=============================<

Count of Symbol Entries = 4
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #2 
=> SsaId(value='y', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #3 
=> SsaId(value='y1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Forward ValueSymbolTable Summary ==<
>=============================<

>=============================<
>==== Autodiff ValueSymbolTable Summary ====<
>=============================<

Count of Symbol Entries = 4
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #2 
=> SsaId(value='y', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #3 
=> SsaId(value='y1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Autodiff ValueSymbolTable Summary ==<
>=============================<

>=============================<
>==== Saved Activation Table Summary ====<
>=============================<

Count of Symbol Entries = 3
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x-act', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1-act', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #2 
=> SsaId(value='y-act', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Saved Activation Table Summary ==<
>=============================<

>=============================<
>==== Autodiff Func Args Table Summary ====<
>=============================<

Count of Symbol Entries = 1
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='y1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Autodiff Func Args Table Summary ==<
>=============================<

>=============================<
>==== Autodiff Func Rets Table Summary ====<
>=============================<

Count of Symbol Entries = 2
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Autodiff Func Rets Table Summary ==<
>=============================<

pass_manager_base::schedule_passes
runrun pass pass
%y = atir.matmul %x , %x1 : (tensor<32x50xf32>, tensor<50x50xf32>) -> tensor<32x50xf32>
{'shape': (2,), 'dtype': 'i32'}
x_0
{'from_unary_tensor': RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>)), 'transpose_order': [1, 0]}
{'from_unary_tensor': RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>)), 'transpose_order': [1, 0]}
x-0
x1-0
y_0
{}
y_1
y_2
y-0
>=============================<
>==== Forward ValueSymbolTable Summary ====<
>=============================<

Count of Symbol Entries = 4
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #2 
=> SsaId(value='y', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #3 
=> SsaId(value='y1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Forward ValueSymbolTable Summary ==<
>=============================<

>=============================<
>==== Autodiff ValueSymbolTable Summary ====<
>=============================<

Count of Symbol Entries = 14
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #2 
=> SsaId(value='y', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #3 
=> SsaId(value='y1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #4 
=> SsaId(value='x_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=2)], element_type=SignlessIntegerType(width=32))

Symbol #5 
=> SsaId(value='x-act_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=32)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #6 
=> SsaId(value='x1-act_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #7 
=> SsaId(value='x-0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #8 
=> SsaId(value='x1-0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #9 
=> SsaId(value='y-act_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #10 
=> SsaId(value='y_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #11 
=> SsaId(value='y_1', op_no=None) 
=> UnitTensorType(element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #12 
=> SsaId(value='y_2', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #13 
=> SsaId(value='y-0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Autodiff ValueSymbolTable Summary ==<
>=============================<

>=============================<
>==== Saved Activation Table Summary ====<
>=============================<

Count of Symbol Entries = 3
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x-act', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1-act', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #2 
=> SsaId(value='y-act', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Saved Activation Table Summary ==<
>=============================<

>=============================<
>==== Autodiff Func Args Table Summary ====<
>=============================<

Count of Symbol Entries = 1
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='y1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Autodiff Func Args Table Summary ==<
>=============================<

>=============================<
>==== Autodiff Func Rets Table Summary ====<
>=============================<

Count of Symbol Entries = 2
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Autodiff Func Rets Table Summary ==<
>=============================<

>=============================<
>==== Forward ValueSymbolTable Summary ====<
>=============================<

Count of Symbol Entries = 4
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #2 
=> SsaId(value='y', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #3 
=> SsaId(value='y1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Forward ValueSymbolTable Summary ==<
>=============================<

>=============================<
>==== Autodiff ValueSymbolTable Summary ====<
>=============================<

Count of Symbol Entries = 14
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #2 
=> SsaId(value='y', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #3 
=> SsaId(value='y1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #4 
=> SsaId(value='x_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=2)], element_type=SignlessIntegerType(width=32))

Symbol #5 
=> SsaId(value='x-act_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=32)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #6 
=> SsaId(value='x1-act_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #7 
=> SsaId(value='x-0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #8 
=> SsaId(value='x1-0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #9 
=> SsaId(value='y-act_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #10 
=> SsaId(value='y_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #11 
=> SsaId(value='y_1', op_no=None) 
=> UnitTensorType(element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #12 
=> SsaId(value='y_2', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #13 
=> SsaId(value='y-0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Autodiff ValueSymbolTable Summary ==<
>=============================<

>=============================<
>==== Saved Activation Table Summary ====<
>=============================<

Count of Symbol Entries = 3
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x-act', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1-act', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #2 
=> SsaId(value='y-act', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Saved Activation Table Summary ==<
>=============================<

>=============================<
>==== Autodiff Func Args Table Summary ====<
>=============================<

Count of Symbol Entries = 1
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='y1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Autodiff Func Args Table Summary ==<
>=============================<

>=============================<
>==== Autodiff Func Rets Table Summary ====<
>=============================<

Count of Symbol Entries = 2
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Autodiff Func Rets Table Summary ==<
>=============================<

>=============================<
>==== Forward ValueSymbolTable Summary ====<
>=============================<

Count of Symbol Entries = 4
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #2 
=> SsaId(value='y', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #3 
=> SsaId(value='y1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Forward ValueSymbolTable Summary ==<
>=============================<

>=============================<
>==== Autodiff ValueSymbolTable Summary ====<
>=============================<

Count of Symbol Entries = 14
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #2 
=> SsaId(value='y', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #3 
=> SsaId(value='y1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #4 
=> SsaId(value='x_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=2)], element_type=SignlessIntegerType(width=32))

Symbol #5 
=> SsaId(value='x-act_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=32)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #6 
=> SsaId(value='x1-act_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #7 
=> SsaId(value='x-0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #8 
=> SsaId(value='x1-0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #9 
=> SsaId(value='y-act_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #10 
=> SsaId(value='y_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #11 
=> SsaId(value='y_1', op_no=None) 
=> UnitTensorType(element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #12 
=> SsaId(value='y_2', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #13 
=> SsaId(value='y-0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Autodiff ValueSymbolTable Summary ==<
>=============================<

>=============================<
>==== Saved Activation Table Summary ====<
>=============================<

Count of Symbol Entries = 3
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x-act', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1-act', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #2 
=> SsaId(value='y-act', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Saved Activation Table Summary ==<
>=============================<

>=============================<
>==== Autodiff Func Args Table Summary ====<
>=============================<

Count of Symbol Entries = 1
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='y1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Autodiff Func Args Table Summary ==<
>=============================<

>=============================<
>==== Autodiff Func Rets Table Summary ====<
>=============================<

Count of Symbol Entries = 2
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Autodiff Func Rets Table Summary ==<
>=============================<

>=============================<
>==== Forward ValueSymbolTable Summary ====<
>=============================<

Count of Symbol Entries = 4
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #2 
=> SsaId(value='y', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #3 
=> SsaId(value='y1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Forward ValueSymbolTable Summary ==<
>=============================<

>=============================<
>==== Autodiff ValueSymbolTable Summary ====<
>=============================<

Count of Symbol Entries = 14
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #2 
=> SsaId(value='y', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #3 
=> SsaId(value='y1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #4 
=> SsaId(value='x_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=2)], element_type=SignlessIntegerType(width=32))

Symbol #5 
=> SsaId(value='x-act_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=32)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #6 
=> SsaId(value='x1-act_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #7 
=> SsaId(value='x-0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #8 
=> SsaId(value='x1-0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #9 
=> SsaId(value='y-act_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #10 
=> SsaId(value='y_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #11 
=> SsaId(value='y_1', op_no=None) 
=> UnitTensorType(element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #12 
=> SsaId(value='y_2', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #13 
=> SsaId(value='y-0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Autodiff ValueSymbolTable Summary ==<
>=============================<

>=============================<
>==== Saved Activation Table Summary ====<
>=============================<

Count of Symbol Entries = 3
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x-act', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1-act', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #2 
=> SsaId(value='y-act', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Saved Activation Table Summary ==<
>=============================<

>=============================<
>==== Autodiff Func Args Table Summary ====<
>=============================<

Count of Symbol Entries = 1
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='y1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Autodiff Func Args Table Summary ==<
>=============================<

>=============================<
>==== Autodiff Func Rets Table Summary ====<
>=============================<

Count of Symbol Entries = 2
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Autodiff Func Rets Table Summary ==<
>=============================<

------ ATIR IR -------
module @forward_85c7577cb9214d9ea764626eaf20c047 {
  func @forward(%x: tensor<32x50xf32>, %x1: tensor<50x50xf32>) -> (tensor<32x50xf32>, tensor<32x50xf32>, tensor<50x50xf32>, tensor<32x50xf32>) {
    %y = atir.matmul %x , %x1 : (tensor<32x50xf32>, tensor<50x50xf32>) -> tensor<32x50xf32>
    %y1 = atir.tanh %y : (tensor<32x50xf32>) -> tensor<32x50xf32>
    %x-act = atir.identity %x : (tensor<32x50xf32>) -> tensor<32x50xf32>
    %x1-act = atir.identity %x1 : (tensor<50x50xf32>) -> tensor<50x50xf32>
    %y-act = atir.identity %y : (tensor<32x50xf32>) -> tensor<32x50xf32>
    return %y1, %x-act, %x1-act, %y-act : tensor<32x50xf32>, tensor<32x50xf32>, tensor<50x50xf32>, tensor<32x50xf32>
  }
}
module @backward_85c7577cb9214d9ea764626eaf20c047 {
  func @bpfunction(%y1: tensor<32x50xf32>, %x-act: tensor<32x50xf32>, %x1-act: tensor<50x50xf32>, %y-act: tensor<32x50xf32>) -> (tensor<32x50xf32>, tensor<50x50xf32>) {
    %y-act_0 = atir.tanh %y-act : (tensor<32x50xf32>) -> tensor<32x50xf32>
    %y_0 = atir.mul %y-act_0 , %y-act_0 : (tensor<32x50xf32>, tensor<32x50xf32>) -> tensor<32x50xf32>
    %y_1 = "tosa.const"() {value = dense<1.0> : tensor<f32>} : () -> tensor<f32>
    %y_2 = atir.sub %y_1 , %y_0 : (tensor<f32>, tensor<32x50xf32>) -> tensor<32x50xf32>
    %y-0 = atir.mul %y1 , %y_2 : (tensor<32x50xf32>, tensor<32x50xf32>) -> tensor<32x50xf32>
    %y = atir.identity %y-0 : (tensor<32x50xf32>) -> tensor<32x50xf32>
    %x_0 = "tosa.const"() {value = dense<[1, 0]> : tensor<2xi32>} : () -> tensor<2xi32>
    %x1-act_0 = "tosa.transpose" (%x1-act , %x_0) : (tensor<50x50xf32>, tensor<2xi32>) -> tensor<50x50xf32>
    %x-act_0 = "tosa.transpose" (%x-act , %x_0) : (tensor<32x50xf32>, tensor<2xi32>) -> tensor<50x32xf32>
    %x1-0 = atir.matmul %x-act_0 , %y : (tensor<50x32xf32>, tensor<32x50xf32>) -> tensor<50x50xf32>
    %x-0 = atir.matmul %y , %x1-act_0 : (tensor<32x50xf32>, tensor<50x50xf32>) -> tensor<32x50xf32>
    %x = atir.identity %x-0 : (tensor<32x50xf32>) -> tensor<32x50xf32>
    %x1 = atir.identity %x1-0 : (tensor<50x50xf32>) -> tensor<50x50xf32>
    return %x, %x1 : tensor<32x50xf32>, tensor<50x50xf32>
  }
}
------ TOSA IR -------
module @forward_85c7577cb9214d9ea764626eaf20c047  {
  func @forward(%arg0: tensor<32x50xf32>, %arg1: tensor<50x50xf32>) -> (tensor<32x50xf32>, tensor<32x50xf32>, tensor<50x50xf32>, tensor<32x50xf32>) {
    %0 = "tosa.reshape"(%arg0) {new_shape = [1, 32, 50]} : (tensor<32x50xf32>) -> tensor<1x32x50xf32>
    %1 = "tosa.reshape"(%arg1) {new_shape = [1, 50, 50]} : (tensor<50x50xf32>) -> tensor<1x50x50xf32>
    %2 = "tosa.matmul"(%0, %1) : (tensor<1x32x50xf32>, tensor<1x50x50xf32>) -> tensor<1x32x50xf32>
    %3 = "tosa.reshape"(%2) {new_shape = [32, 50]} : (tensor<1x32x50xf32>) -> tensor<32x50xf32>
    %4 = "tosa.tanh"(%3) : (tensor<32x50xf32>) -> tensor<32x50xf32>
    %5 = "tosa.identity"(%arg0) : (tensor<32x50xf32>) -> tensor<32x50xf32>
    %6 = "tosa.identity"(%arg1) : (tensor<50x50xf32>) -> tensor<50x50xf32>
    %7 = "tosa.identity"(%3) : (tensor<32x50xf32>) -> tensor<32x50xf32>
    return %4, %5, %6, %7 : tensor<32x50xf32>, tensor<32x50xf32>, tensor<50x50xf32>, tensor<32x50xf32>
  }
}


------ TOSA IR -------
module @backward_85c7577cb9214d9ea764626eaf20c047  {
  func @bpfunction(%arg0: tensor<32x50xf32>, %arg1: tensor<32x50xf32>, %arg2: tensor<50x50xf32>, %arg3: tensor<32x50xf32>) -> (tensor<32x50xf32>, tensor<50x50xf32>) {
    %0 = "tosa.const"() {value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %1 = "tosa.const"() {value = dense<[1, 0]> : tensor<2xi32>} : () -> tensor<2xi32>
    %2 = "tosa.tanh"(%arg3) : (tensor<32x50xf32>) -> tensor<32x50xf32>
    %3 = "tosa.mul"(%2, %2) {shift = 0 : i32} : (tensor<32x50xf32>, tensor<32x50xf32>) -> tensor<32x50xf32>
    %4 = "tosa.sub"(%0, %3) : (tensor<f32>, tensor<32x50xf32>) -> tensor<32x50xf32>
    %5 = "tosa.mul"(%arg0, %4) {shift = 0 : i32} : (tensor<32x50xf32>, tensor<32x50xf32>) -> tensor<32x50xf32>
    %6 = "tosa.identity"(%5) : (tensor<32x50xf32>) -> tensor<32x50xf32>
    %7 = "tosa.transpose"(%arg2, %1) : (tensor<50x50xf32>, tensor<2xi32>) -> tensor<50x50xf32>
    %8 = "tosa.transpose"(%arg1, %1) : (tensor<32x50xf32>, tensor<2xi32>) -> tensor<50x32xf32>
    %9 = "tosa.reshape"(%8) {new_shape = [1, 50, 32]} : (tensor<50x32xf32>) -> tensor<1x50x32xf32>
    %10 = "tosa.reshape"(%6) {new_shape = [1, 32, 50]} : (tensor<32x50xf32>) -> tensor<1x32x50xf32>
    %11 = "tosa.matmul"(%9, %10) : (tensor<1x50x32xf32>, tensor<1x32x50xf32>) -> tensor<1x50x50xf32>
    %12 = "tosa.reshape"(%11) {new_shape = [50, 50]} : (tensor<1x50x50xf32>) -> tensor<50x50xf32>
    %13 = "tosa.reshape"(%6) {new_shape = [1, 32, 50]} : (tensor<32x50xf32>) -> tensor<1x32x50xf32>
    %14 = "tosa.reshape"(%7) {new_shape = [1, 50, 50]} : (tensor<50x50xf32>) -> tensor<1x50x50xf32>
    %15 = "tosa.matmul"(%13, %14) : (tensor<1x32x50xf32>, tensor<1x50x50xf32>) -> tensor<1x32x50xf32>
    %16 = "tosa.reshape"(%15) {new_shape = [32, 50]} : (tensor<1x32x50xf32>) -> tensor<32x50xf32>
    %17 = "tosa.identity"(%16) : (tensor<32x50xf32>) -> tensor<32x50xf32>
    %18 = "tosa.identity"(%12) : (tensor<50x50xf32>) -> tensor<50x50xf32>
    return %17, %18 : tensor<32x50xf32>, tensor<50x50xf32>
  }
}


------ RESULTS in VULKAN GPU -------
vulkan backend inited
<built-in method items of BoundModules object at 0x7f5eec3addb0>
<class 'chopper.iree.runtime.system_api.BoundModule'>
<BoundModule <VmModule forward_85c7577cb9214d9ea764626eaf20c047 : [forward, __init]>>
<VmFunction forward(0rr_rrrr), reflection = {}>
------ PYTHON SRC -------
[91m
*****dumping python ast****
Module(body=[FunctionDef(
  name='forward',
  args=arguments(
    args=[
      arg(
        arg='self',
        annotation=None),
      arg(
        arg='x',
        annotation=None),
      arg(
        arg='x1',
        annotation=None)],
    vararg=None,
    kwonlyargs=[],
    kw_defaults=[],
    kwarg=None,
    defaults=[]),
  body=[
    Assign(
      targets=[Name(
        id='y',
        ctx=Store())],
      value=Call(
        func=Attribute(
          value=Name(
            id='torch',
            ctx=Load()),
          attr='matmul',
          ctx=Load()),
        args=[
          Name(
            id='x',
            ctx=Load()),
          Name(
            id='x1',
            ctx=Load())],
        keywords=[])),
    Assign(
      targets=[Name(
        id='y1',
        ctx=Store())],
      value=Call(
        func=Attribute(
          value=Name(
            id='torch',
            ctx=Load()),
          attr='tanh',
          ctx=Load()),
        args=[Name(
          id='y',
          ctx=Load())],
        keywords=[])),
    Return(value=Name(
      id='y1',
      ctx=Load()))],
  decorator_list=[
    Call(
      func=Name(
        id='backend',
        ctx=Load()),
      args=[Str(s='IREE')],
      keywords=[]),
    Call(
      func=Name(
        id='annotate_arguments',
        ctx=Load()),
      args=[List(
        elts=[
          NameConstant(value=None),
          Tuple(
            elts=[
              List(
                elts=[
                  Num(n=32),
                  Num(n=50)],
                ctx=Load()),
              Attribute(
                value=Name(
                  id='torch',
                  ctx=Load()),
                attr='float32',
                ctx=Load())],
            ctx=Load()),
          Tuple(
            elts=[
              List(
                elts=[
                  Num(n=50),
                  Num(n=10)],
                ctx=Load()),
              Attribute(
                value=Name(
                  id='torch',
                  ctx=Load()),
                attr='float32',
                ctx=Load())],
            ctx=Load())],
        ctx=Load())],
      keywords=[])],
  returns=None)])[0m[95m
*****dumping python code*****


@backend('IREE')
@annotate_arguments([None, ([32, 50], torch.float32), ([50, 10], torch.float32)])
def forward(self, x, x1):
    y = torch.matmul(x, x1)
    y1 = torch.tanh(y)
    return y1
[0m
*******************

pass_manager_base::schedule_passes

====== enter AnnotateCompletionPass =====

<chopper.pass_manager.transformers.annotate_types_visitor.AnnotateTypesVisitor object at 0x7f5eec1e7c88> ::visit_FunctionDef

{}
{'shape': [32, 50], 'dtype': 'f32'}
x
{'shape': [50, 10], 'dtype': 'f32'}
x1
<chopper.pass_manager.transformers.annotate_types_visitor.AnnotateTypesVisitor object at 0x7f5eec1e7c88> ::visit_Assign

Call(
  func=Attribute(
    value=Name(
      id='torch',
      ctx=Load()),
    attr='matmul',
    ctx=Load()),
  args=[
    Name(
      id='x',
      ctx=Load()),
    Name(
      id='x1',
      ctx=Load())],
  keywords=[])
warning: redefine of value x with, newtype = RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))
warning: redefine of value x1 with, newtype = RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))
{'from_lhs_tensor': RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>)), 'from_rhs_tensor': RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>)), 'bin_op': 'matmul'}
y
<chopper.pass_manager.transformers.annotate_types_visitor.AnnotateTypesVisitor object at 0x7f5eec1e7c88> ::visit_Assign

Call(
  func=Attribute(
    value=Name(
      id='torch',
      ctx=Load()),
    attr='tanh',
    ctx=Load()),
  args=[Name(
    id='y',
    ctx=Load())],
  keywords=[])
y1
<chopper.pass_manager.transformers.annotate_types_visitor.AnnotateTypesVisitor object at 0x7f5eec1e7c88> ::visit_Return

>=============================<
>==== Forward ValueSymbolTable Summary ====<
>=============================<

Count of Symbol Entries = 4
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #2 
=> SsaId(value='y', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #3 
=> SsaId(value='y1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Forward ValueSymbolTable Summary ==<
>=============================<

>=============================<
>==== Autodiff ValueSymbolTable Summary ====<
>=============================<

Count of Symbol Entries = 4
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #2 
=> SsaId(value='y', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #3 
=> SsaId(value='y1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Autodiff ValueSymbolTable Summary ==<
>=============================<

>=============================<
>==== Saved Activation Table Summary ====<
>=============================<

Count of Symbol Entries = 3
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x-act', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1-act', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #2 
=> SsaId(value='y-act', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Saved Activation Table Summary ==<
>=============================<

>=============================<
>==== Autodiff Func Args Table Summary ====<
>=============================<

Count of Symbol Entries = 1
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='y1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Autodiff Func Args Table Summary ==<
>=============================<

>=============================<
>==== Autodiff Func Rets Table Summary ====<
>=============================<

Count of Symbol Entries = 2
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Autodiff Func Rets Table Summary ==<
>=============================<

pass_manager_base::schedule_passes
runrun pass pass
%y = atir.matmul %x , %x1 : (tensor<32x50xf32>, tensor<50x10xf32>) -> tensor<32x10xf32>
{'shape': (2,), 'dtype': 'i32'}
x_0
{'from_unary_tensor': RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>)), 'transpose_order': [1, 0]}
{'from_unary_tensor': RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>)), 'transpose_order': [1, 0]}
x-0
x1-0
y_0
{}
y_1
y_2
y-0
>=============================<
>==== Forward ValueSymbolTable Summary ====<
>=============================<

Count of Symbol Entries = 4
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #2 
=> SsaId(value='y', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #3 
=> SsaId(value='y1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Forward ValueSymbolTable Summary ==<
>=============================<

>=============================<
>==== Autodiff ValueSymbolTable Summary ====<
>=============================<

Count of Symbol Entries = 14
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #2 
=> SsaId(value='y', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #3 
=> SsaId(value='y1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #4 
=> SsaId(value='x_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=2)], element_type=SignlessIntegerType(width=32))

Symbol #5 
=> SsaId(value='x-act_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=32)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #6 
=> SsaId(value='x1-act_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=10), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #7 
=> SsaId(value='x-0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #8 
=> SsaId(value='x1-0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #9 
=> SsaId(value='y-act_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #10 
=> SsaId(value='y_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #11 
=> SsaId(value='y_1', op_no=None) 
=> UnitTensorType(element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #12 
=> SsaId(value='y_2', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #13 
=> SsaId(value='y-0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Autodiff ValueSymbolTable Summary ==<
>=============================<

>=============================<
>==== Saved Activation Table Summary ====<
>=============================<

Count of Symbol Entries = 3
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x-act', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1-act', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #2 
=> SsaId(value='y-act', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Saved Activation Table Summary ==<
>=============================<

>=============================<
>==== Autodiff Func Args Table Summary ====<
>=============================<

Count of Symbol Entries = 1
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='y1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Autodiff Func Args Table Summary ==<
>=============================<

>=============================<
>==== Autodiff Func Rets Table Summary ====<
>=============================<

Count of Symbol Entries = 2
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Autodiff Func Rets Table Summary ==<
>=============================<

>=============================<
>==== Forward ValueSymbolTable Summary ====<
>=============================<

Count of Symbol Entries = 4
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #2 
=> SsaId(value='y', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #3 
=> SsaId(value='y1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Forward ValueSymbolTable Summary ==<
>=============================<

>=============================<
>==== Autodiff ValueSymbolTable Summary ====<
>=============================<

Count of Symbol Entries = 14
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #2 
=> SsaId(value='y', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #3 
=> SsaId(value='y1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #4 
=> SsaId(value='x_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=2)], element_type=SignlessIntegerType(width=32))

Symbol #5 
=> SsaId(value='x-act_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=32)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #6 
=> SsaId(value='x1-act_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=10), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #7 
=> SsaId(value='x-0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #8 
=> SsaId(value='x1-0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #9 
=> SsaId(value='y-act_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #10 
=> SsaId(value='y_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #11 
=> SsaId(value='y_1', op_no=None) 
=> UnitTensorType(element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #12 
=> SsaId(value='y_2', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #13 
=> SsaId(value='y-0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Autodiff ValueSymbolTable Summary ==<
>=============================<

>=============================<
>==== Saved Activation Table Summary ====<
>=============================<

Count of Symbol Entries = 3
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x-act', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1-act', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #2 
=> SsaId(value='y-act', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Saved Activation Table Summary ==<
>=============================<

>=============================<
>==== Autodiff Func Args Table Summary ====<
>=============================<

Count of Symbol Entries = 1
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='y1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Autodiff Func Args Table Summary ==<
>=============================<

>=============================<
>==== Autodiff Func Rets Table Summary ====<
>=============================<

Count of Symbol Entries = 2
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Autodiff Func Rets Table Summary ==<
>=============================<

>=============================<
>==== Forward ValueSymbolTable Summary ====<
>=============================<

Count of Symbol Entries = 4
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #2 
=> SsaId(value='y', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #3 
=> SsaId(value='y1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Forward ValueSymbolTable Summary ==<
>=============================<

>=============================<
>==== Autodiff ValueSymbolTable Summary ====<
>=============================<

Count of Symbol Entries = 14
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #2 
=> SsaId(value='y', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #3 
=> SsaId(value='y1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #4 
=> SsaId(value='x_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=2)], element_type=SignlessIntegerType(width=32))

Symbol #5 
=> SsaId(value='x-act_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=32)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #6 
=> SsaId(value='x1-act_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=10), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #7 
=> SsaId(value='x-0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #8 
=> SsaId(value='x1-0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #9 
=> SsaId(value='y-act_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #10 
=> SsaId(value='y_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #11 
=> SsaId(value='y_1', op_no=None) 
=> UnitTensorType(element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #12 
=> SsaId(value='y_2', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #13 
=> SsaId(value='y-0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Autodiff ValueSymbolTable Summary ==<
>=============================<

>=============================<
>==== Saved Activation Table Summary ====<
>=============================<

Count of Symbol Entries = 3
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x-act', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1-act', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #2 
=> SsaId(value='y-act', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Saved Activation Table Summary ==<
>=============================<

>=============================<
>==== Autodiff Func Args Table Summary ====<
>=============================<

Count of Symbol Entries = 1
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='y1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Autodiff Func Args Table Summary ==<
>=============================<

>=============================<
>==== Autodiff Func Rets Table Summary ====<
>=============================<

Count of Symbol Entries = 2
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Autodiff Func Rets Table Summary ==<
>=============================<

>=============================<
>==== Forward ValueSymbolTable Summary ====<
>=============================<

Count of Symbol Entries = 4
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #2 
=> SsaId(value='y', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #3 
=> SsaId(value='y1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Forward ValueSymbolTable Summary ==<
>=============================<

>=============================<
>==== Autodiff ValueSymbolTable Summary ====<
>=============================<

Count of Symbol Entries = 14
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #2 
=> SsaId(value='y', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #3 
=> SsaId(value='y1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #4 
=> SsaId(value='x_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=2)], element_type=SignlessIntegerType(width=32))

Symbol #5 
=> SsaId(value='x-act_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=32)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #6 
=> SsaId(value='x1-act_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=10), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #7 
=> SsaId(value='x-0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #8 
=> SsaId(value='x1-0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #9 
=> SsaId(value='y-act_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #10 
=> SsaId(value='y_0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #11 
=> SsaId(value='y_1', op_no=None) 
=> UnitTensorType(element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #12 
=> SsaId(value='y_2', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #13 
=> SsaId(value='y-0', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Autodiff ValueSymbolTable Summary ==<
>=============================<

>=============================<
>==== Saved Activation Table Summary ====<
>=============================<

Count of Symbol Entries = 3
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x-act', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1-act', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #2 
=> SsaId(value='y-act', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Saved Activation Table Summary ==<
>=============================<

>=============================<
>==== Autodiff Func Args Table Summary ====<
>=============================<

Count of Symbol Entries = 1
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='y1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Autodiff Func Args Table Summary ==<
>=============================<

>=============================<
>==== Autodiff Func Rets Table Summary ====<
>=============================<

Count of Symbol Entries = 2
Listing Symbol Entries ...


Symbol #0 
=> SsaId(value='x', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=32), Dimension(value=50)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))

Symbol #1 
=> SsaId(value='x1', op_no=None) 
=> RankedTensorType(dimensions=[Dimension(value=50), Dimension(value=10)], element_type=FloatType(type=<FloatTypeEnum.f32: 'f32'>))


>=============================<
>== End Autodiff Func Rets Table Summary ==<
>=============================<

------ ATIR IR -------
module @forward_d8e33aa4541644298bec8d2f96843dd0 {
  func @forward(%x: tensor<32x50xf32>, %x1: tensor<50x10xf32>) -> (tensor<32x10xf32>, tensor<32x50xf32>, tensor<50x10xf32>, tensor<32x10xf32>) {
    %y = atir.matmul %x , %x1 : (tensor<32x50xf32>, tensor<50x10xf32>) -> tensor<32x10xf32>
    %y1 = atir.tanh %y : (tensor<32x10xf32>) -> tensor<32x10xf32>
    %x-act = atir.identity %x : (tensor<32x50xf32>) -> tensor<32x50xf32>
    %x1-act = atir.identity %x1 : (tensor<50x10xf32>) -> tensor<50x10xf32>
    %y-act = atir.identity %y : (tensor<32x10xf32>) -> tensor<32x10xf32>
    return %y1, %x-act, %x1-act, %y-act : tensor<32x10xf32>, tensor<32x50xf32>, tensor<50x10xf32>, tensor<32x10xf32>
  }
}
module @backward_d8e33aa4541644298bec8d2f96843dd0 {
  func @bpfunction(%y1: tensor<32x10xf32>, %x-act: tensor<32x50xf32>, %x1-act: tensor<50x10xf32>, %y-act: tensor<32x10xf32>) -> (tensor<32x50xf32>, tensor<50x10xf32>) {
    %y-act_0 = atir.tanh %y-act : (tensor<32x10xf32>) -> tensor<32x10xf32>
    %y_0 = atir.mul %y-act_0 , %y-act_0 : (tensor<32x10xf32>, tensor<32x10xf32>) -> tensor<32x10xf32>
    %y_1 = "tosa.const"() {value = dense<1.0> : tensor<f32>} : () -> tensor<f32>
    %y_2 = atir.sub %y_1 , %y_0 : (tensor<f32>, tensor<32x10xf32>) -> tensor<32x10xf32>
    %y-0 = atir.mul %y1 , %y_2 : (tensor<32x10xf32>, tensor<32x10xf32>) -> tensor<32x10xf32>
    %y = atir.identity %y-0 : (tensor<32x10xf32>) -> tensor<32x10xf32>
    %x_0 = "tosa.const"() {value = dense<[1, 0]> : tensor<2xi32>} : () -> tensor<2xi32>
    %x1-act_0 = "tosa.transpose" (%x1-act , %x_0) : (tensor<50x10xf32>, tensor<2xi32>) -> tensor<10x50xf32>
    %x-act_0 = "tosa.transpose" (%x-act , %x_0) : (tensor<32x50xf32>, tensor<2xi32>) -> tensor<50x32xf32>
    %x1-0 = atir.matmul %x-act_0 , %y : (tensor<50x32xf32>, tensor<32x10xf32>) -> tensor<50x10xf32>
    %x-0 = atir.matmul %y , %x1-act_0 : (tensor<32x10xf32>, tensor<10x50xf32>) -> tensor<32x50xf32>
    %x = atir.identity %x-0 : (tensor<32x50xf32>) -> tensor<32x50xf32>
    %x1 = atir.identity %x1-0 : (tensor<50x10xf32>) -> tensor<50x10xf32>
    return %x, %x1 : tensor<32x50xf32>, tensor<50x10xf32>
  }
}
------ TOSA IR -------
module @forward_d8e33aa4541644298bec8d2f96843dd0  {
  func @forward(%arg0: tensor<32x50xf32>, %arg1: tensor<50x10xf32>) -> (tensor<32x10xf32>, tensor<32x50xf32>, tensor<50x10xf32>, tensor<32x10xf32>) {
    %0 = "tosa.reshape"(%arg0) {new_shape = [1, 32, 50]} : (tensor<32x50xf32>) -> tensor<1x32x50xf32>
    %1 = "tosa.reshape"(%arg1) {new_shape = [1, 50, 10]} : (tensor<50x10xf32>) -> tensor<1x50x10xf32>
    %2 = "tosa.matmul"(%0, %1) : (tensor<1x32x50xf32>, tensor<1x50x10xf32>) -> tensor<1x32x10xf32>
    %3 = "tosa.reshape"(%2) {new_shape = [32, 10]} : (tensor<1x32x10xf32>) -> tensor<32x10xf32>
    %4 = "tosa.tanh"(%3) : (tensor<32x10xf32>) -> tensor<32x10xf32>
    %5 = "tosa.identity"(%arg0) : (tensor<32x50xf32>) -> tensor<32x50xf32>
    %6 = "tosa.identity"(%arg1) : (tensor<50x10xf32>) -> tensor<50x10xf32>
    %7 = "tosa.identity"(%3) : (tensor<32x10xf32>) -> tensor<32x10xf32>
    return %4, %5, %6, %7 : tensor<32x10xf32>, tensor<32x50xf32>, tensor<50x10xf32>, tensor<32x10xf32>
  }
}


------ TOSA IR -------
module @backward_d8e33aa4541644298bec8d2f96843dd0  {
  func @bpfunction(%arg0: tensor<32x10xf32>, %arg1: tensor<32x50xf32>, %arg2: tensor<50x10xf32>, %arg3: tensor<32x10xf32>) -> (tensor<32x50xf32>, tensor<50x10xf32>) {
    %0 = "tosa.const"() {value = dense<1.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %1 = "tosa.const"() {value = dense<[1, 0]> : tensor<2xi32>} : () -> tensor<2xi32>
    %2 = "tosa.tanh"(%arg3) : (tensor<32x10xf32>) -> tensor<32x10xf32>
    %3 = "tosa.mul"(%2, %2) {shift = 0 : i32} : (tensor<32x10xf32>, tensor<32x10xf32>) -> tensor<32x10xf32>
    %4 = "tosa.sub"(%0, %3) : (tensor<f32>, tensor<32x10xf32>) -> tensor<32x10xf32>
    %5 = "tosa.mul"(%arg0, %4) {shift = 0 : i32} : (tensor<32x10xf32>, tensor<32x10xf32>) -> tensor<32x10xf32>
    %6 = "tosa.identity"(%5) : (tensor<32x10xf32>) -> tensor<32x10xf32>
    %7 = "tosa.transpose"(%arg2, %1) : (tensor<50x10xf32>, tensor<2xi32>) -> tensor<10x50xf32>
    %8 = "tosa.transpose"(%arg1, %1) : (tensor<32x50xf32>, tensor<2xi32>) -> tensor<50x32xf32>
    %9 = "tosa.reshape"(%8) {new_shape = [1, 50, 32]} : (tensor<50x32xf32>) -> tensor<1x50x32xf32>
    %10 = "tosa.reshape"(%6) {new_shape = [1, 32, 10]} : (tensor<32x10xf32>) -> tensor<1x32x10xf32>
    %11 = "tosa.matmul"(%9, %10) : (tensor<1x50x32xf32>, tensor<1x32x10xf32>) -> tensor<1x50x10xf32>
    %12 = "tosa.reshape"(%11) {new_shape = [50, 10]} : (tensor<1x50x10xf32>) -> tensor<50x10xf32>
    %13 = "tosa.reshape"(%6) {new_shape = [1, 32, 10]} : (tensor<32x10xf32>) -> tensor<1x32x10xf32>
    %14 = "tosa.reshape"(%7) {new_shape = [1, 10, 50]} : (tensor<10x50xf32>) -> tensor<1x10x50xf32>
    %15 = "tosa.matmul"(%13, %14) : (tensor<1x32x10xf32>, tensor<1x10x50xf32>) -> tensor<1x32x50xf32>
    %16 = "tosa.reshape"(%15) {new_shape = [32, 50]} : (tensor<1x32x50xf32>) -> tensor<32x50xf32>
    %17 = "tosa.identity"(%16) : (tensor<32x50xf32>) -> tensor<32x50xf32>
    %18 = "tosa.identity"(%12) : (tensor<50x10xf32>) -> tensor<50x10xf32>
    return %17, %18 : tensor<32x50xf32>, tensor<50x10xf32>
  }
}


------ RESULTS in VULKAN GPU -------
vulkan backend inited
<built-in method items of BoundModules object at 0x7f5eec3addb0>
<class 'chopper.iree.runtime.system_api.BoundModule'>
<BoundModule <VmModule forward_d8e33aa4541644298bec8d2f96843dd0 : [forward, __init]>>
<VmFunction forward(0rr_rrrr), reflection = {}>
=============model parameters=================
<generator object Module.parameters at 0x7f5eec22ee08>
==========model================
Net(
  (mlp_layer1): MLP_Layer1()
  (mlp_layer2): MLP_Layer2()
  (mlp_layer3): MLP_Layer3()
)
Train Epoch: 1 [0/60000 (0%)]	Loss: 2.310331
Train Epoch: 1 [640/60000 (1%)]	Loss: 2.284503
Train Epoch: 1 [1280/60000 (2%)]	Loss: 2.276881
Train Epoch: 1 [1920/60000 (3%)]	Loss: 2.270448
Train Epoch: 1 [2560/60000 (4%)]	Loss: 2.254301
Train Epoch: 1 [3200/60000 (5%)]	Loss: 2.221618
Train Epoch: 1 [3840/60000 (6%)]	Loss: 2.190176
Train Epoch: 1 [4480/60000 (7%)]	Loss: 2.152235
Train Epoch: 1 [5120/60000 (9%)]	Loss: 2.101987
Train Epoch: 1 [5760/60000 (10%)]	Loss: 2.100411
Train Epoch: 1 [6400/60000 (11%)]	Loss: 2.086797
Train Epoch: 1 [7040/60000 (12%)]	Loss: 1.973582
Train Epoch: 1 [7680/60000 (13%)]	Loss: 1.992395
Train Epoch: 1 [8320/60000 (14%)]	Loss: 1.970602
Train Epoch: 1 [8960/60000 (15%)]	Loss: 1.949979
Train Epoch: 1 [9600/60000 (16%)]	Loss: 1.909709
Train Epoch: 1 [10240/60000 (17%)]	Loss: 1.793203
Train Epoch: 1 [10880/60000 (18%)]	Loss: 1.866458
Train Epoch: 1 [11520/60000 (19%)]	Loss: 1.878679
Train Epoch: 1 [12160/60000 (20%)]	Loss: 1.704940
Train Epoch: 1 [12800/60000 (21%)]	Loss: 1.714322
Train Epoch: 1 [13440/60000 (22%)]	Loss: 1.767851
Train Epoch: 1 [14080/60000 (23%)]	Loss: 1.675448
Train Epoch: 1 [14720/60000 (25%)]	Loss: 1.740757
Train Epoch: 1 [15360/60000 (26%)]	Loss: 1.661814
Train Epoch: 1 [16000/60000 (27%)]	Loss: 1.647001
Train Epoch: 1 [16640/60000 (28%)]	Loss: 1.781481
Train Epoch: 1 [17280/60000 (29%)]	Loss: 1.688450
Train Epoch: 1 [17920/60000 (30%)]	Loss: 1.720880
Train Epoch: 1 [18560/60000 (31%)]	Loss: 1.637206
Train Epoch: 1 [19200/60000 (32%)]	Loss: 1.630208
Train Epoch: 1 [19840/60000 (33%)]	Loss: 1.626420
Train Epoch: 1 [20480/60000 (34%)]	Loss: 1.636472
Train Epoch: 1 [21120/60000 (35%)]	Loss: 1.579629
Train Epoch: 1 [21760/60000 (36%)]	Loss: 1.602558
Train Epoch: 1 [22400/60000 (37%)]	Loss: 1.587370
Train Epoch: 1 [23040/60000 (38%)]	Loss: 1.511078
Train Epoch: 1 [23680/60000 (39%)]	Loss: 1.506944
Train Epoch: 1 [24320/60000 (41%)]	Loss: 1.520544
Train Epoch: 1 [24960/60000 (42%)]	Loss: 1.557227
Train Epoch: 1 [25600/60000 (43%)]	Loss: 1.555973
Train Epoch: 1 [26240/60000 (44%)]	Loss: 1.472079
Train Epoch: 1 [26880/60000 (45%)]	Loss: 1.437236
Train Epoch: 1 [27520/60000 (46%)]	Loss: 1.487838
Train Epoch: 1 [28160/60000 (47%)]	Loss: 1.523569
Train Epoch: 1 [28800/60000 (48%)]	Loss: 1.505613
Train Epoch: 1 [29440/60000 (49%)]	Loss: 1.427906
Train Epoch: 1 [30080/60000 (50%)]	Loss: 1.485609
Train Epoch: 1 [30720/60000 (51%)]	Loss: 1.465038
Train Epoch: 1 [31360/60000 (52%)]	Loss: 1.357530
Train Epoch: 1 [32000/60000 (53%)]	Loss: 1.459872
Train Epoch: 1 [32640/60000 (54%)]	Loss: 1.416105
Train Epoch: 1 [33280/60000 (55%)]	Loss: 1.356801
Train Epoch: 1 [33920/60000 (57%)]	Loss: 1.446318
Train Epoch: 1 [34560/60000 (58%)]	Loss: 1.438737
Train Epoch: 1 [35200/60000 (59%)]	Loss: 1.356287
Train Epoch: 1 [35840/60000 (60%)]	Loss: 1.552721
Train Epoch: 1 [36480/60000 (61%)]	Loss: 1.414919
Train Epoch: 1 [37120/60000 (62%)]	Loss: 1.375507
Train Epoch: 1 [37760/60000 (63%)]	Loss: 1.322725
Train Epoch: 1 [38400/60000 (64%)]	Loss: 1.449020
Train Epoch: 1 [39040/60000 (65%)]	Loss: 1.424191
Train Epoch: 1 [39680/60000 (66%)]	Loss: 1.412575
Train Epoch: 1 [40320/60000 (67%)]	Loss: 1.413173
Train Epoch: 1 [40960/60000 (68%)]	Loss: 1.387973
Train Epoch: 1 [41600/60000 (69%)]	Loss: 1.357931
Train Epoch: 1 [42240/60000 (70%)]	Loss: 1.428121
Train Epoch: 1 [42880/60000 (71%)]	Loss: 1.370788
Train Epoch: 1 [43520/60000 (73%)]	Loss: 1.284841
Train Epoch: 1 [44160/60000 (74%)]	Loss: 1.352758
Train Epoch: 1 [44800/60000 (75%)]	Loss: 1.405603
Train Epoch: 1 [45440/60000 (76%)]	Loss: 1.256845
Train Epoch: 1 [46080/60000 (77%)]	Loss: 1.342344
Train Epoch: 1 [46720/60000 (78%)]	Loss: 1.258101
Train Epoch: 1 [47360/60000 (79%)]	Loss: 1.361576
Train Epoch: 1 [48000/60000 (80%)]	Loss: 1.236340
Train Epoch: 1 [48640/60000 (81%)]	Loss: 1.270566
Train Epoch: 1 [49280/60000 (82%)]	Loss: 1.346179
Train Epoch: 1 [49920/60000 (83%)]	Loss: 1.322703
Train Epoch: 1 [50560/60000 (84%)]	Loss: 1.259648
Train Epoch: 1 [51200/60000 (85%)]	Loss: 1.409522
Train Epoch: 1 [51840/60000 (86%)]	Loss: 1.287559
Train Epoch: 1 [52480/60000 (87%)]	Loss: 1.366657
Train Epoch: 1 [53120/60000 (89%)]	Loss: 1.341375
Train Epoch: 1 [53760/60000 (90%)]	Loss: 1.228965
Train Epoch: 1 [54400/60000 (91%)]	Loss: 1.310261
Train Epoch: 1 [55040/60000 (92%)]	Loss: 1.181237
Train Epoch: 1 [55680/60000 (93%)]	Loss: 1.312146
Train Epoch: 1 [56320/60000 (94%)]	Loss: 1.301967
Train Epoch: 1 [56960/60000 (95%)]	Loss: 1.226775
Train Epoch: 1 [57600/60000 (96%)]	Loss: 1.279066
Train Epoch: 1 [58240/60000 (97%)]	Loss: 1.214384
Train Epoch: 1 [58880/60000 (98%)]	Loss: 1.312122
Train Epoch: 1 [59520/60000 (99%)]	Loss: 1.226923
Time Cost = 26.710188150405884 sec

Validation set: Average loss: 1.2100, Accuracy: 8476/10000 (85%)

