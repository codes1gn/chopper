module attributes {tf.versions = {bad_consumers = [], min_consumer = 0 : i32, producer = 1087 : i32}}  {
  func @main() -> tensor<10xf32> attributes {tf.entry_function = {control_outputs = "", inputs = "", outputs = "identity_RetVal"}} {
    %0 = mhlo.constant dense<4.000000e+00> : tensor<10xf32>
    %1 = mhlo.constant dense<1> : tensor<ui64>
    %2 = mhlo.constant dense<2> : tensor<ui64>
    %3 = mhlo.constant dense<1053357856> : tensor<ui32>
    %4 = mhlo.constant dense<38149673> : tensor<ui32>
    %5 = mhlo.constant dense<3468443297> : tensor<ui32>
    %6 = mhlo.constant dense<2454539055> : tensor<ui32>
    %7 = mhlo.constant dense<4095070582> : tensor<ui32>
    %8 = mhlo.constant dense<1440634813> : tensor<ui32>
    %9 = mhlo.constant dense<3081166340> : tensor<ui32>
    %10 = mhlo.constant dense<426730571> : tensor<ui32>
    %11 = mhlo.constant dense<2067262098> : tensor<ui32>
    %12 = mhlo.constant dense<3707793625> : tensor<ui32>
    %13 = mhlo.constant dense<3716387409> : tensor<ui32>
    %14 = mhlo.constant dense<572253132> : tensor<ui32>
    %15 = mhlo.constant dense<1723086151> : tensor<ui32>
    %16 = mhlo.constant dense<2873919170> : tensor<ui32>
    %17 = mhlo.constant dense<4024752189> : tensor<ui32>
    %18 = mhlo.constant dense<880617912> : tensor<ui32>
    %19 = mhlo.constant dense<2031450931> : tensor<ui32>
    %20 = mhlo.constant dense<3182283950> : tensor<ui32>
    %21 = mhlo.constant dense<3528531795> : tensor<ui64>
    %22 = mhlo.constant dense<3449720151> : tensor<ui64>
    %23 = mhlo.constant dense<32> : tensor<ui64>
    %24 = mhlo.constant dense<0> : tensor<ui64>
    %25 = mhlo.constant dense<9> : tensor<10xui32>
    %26 = mhlo.constant dense<1.1920929E-7> : tensor<10xf32>
    %27 = mhlo.constant dense<1.000000e+00> : tensor<10xf32>
    %28 = mhlo.constant dense<0.000000e+00> : tensor<10xf32>
    %29 = mhlo.shift_left %2, %23 : tensor<ui64>
    %30 = mhlo.or %29, %1 : tensor<ui64>
    %31 = "mhlo.convert"(%30) : (tensor<ui64>) -> tensor<ui32>
    %32 = mhlo.shift_right_logical %30, %23 : tensor<ui64>
    %33 = "mhlo.convert"(%32) : (tensor<ui64>) -> tensor<ui32>
    %34 = "mhlo.convert"(%31) : (tensor<ui32>) -> tensor<ui64>
    %35 = "mhlo.convert"(%33) : (tensor<ui32>) -> tensor<ui64>
    %36 = "mhlo.convert"(%34) : (tensor<ui64>) -> tensor<ui32>
    %37 = mhlo.shift_right_logical %34, %23 : tensor<ui64>
    %38 = "mhlo.convert"(%37) : (tensor<ui64>) -> tensor<ui32>
    %39 = "mhlo.convert"(%35) : (tensor<ui64>) -> tensor<ui32>
    %40 = mhlo.shift_right_logical %35, %23 : tensor<ui64>
    %41 = "mhlo.convert"(%40) : (tensor<ui64>) -> tensor<ui32>
    %42 = "mhlo.convert"(%36) : (tensor<ui32>) -> tensor<ui64>
    %43 = mhlo.multiply %42, %21 : tensor<ui64>
    %44 = "mhlo.convert"(%43) : (tensor<ui64>) -> tensor<ui32>
    %45 = mhlo.shift_right_logical %43, %23 : tensor<ui64>
    %46 = "mhlo.convert"(%45) : (tensor<ui64>) -> tensor<ui32>
    %47 = "mhlo.convert"(%39) : (tensor<ui32>) -> tensor<ui64>
    %48 = mhlo.multiply %47, %22 : tensor<ui64>
    %49 = "mhlo.convert"(%48) : (tensor<ui64>) -> tensor<ui32>
    %50 = mhlo.shift_right_logical %48, %23 : tensor<ui64>
    %51 = "mhlo.convert"(%50) : (tensor<ui64>) -> tensor<ui32>
    %52 = mhlo.xor %51, %38 : tensor<ui32>
    %53 = mhlo.xor %52, %3 : tensor<ui32>
    %54 = mhlo.xor %46, %41 : tensor<ui32>
    %55 = mhlo.xor %54, %4 : tensor<ui32>
    %56 = "mhlo.convert"(%53) : (tensor<ui32>) -> tensor<ui64>
    %57 = mhlo.multiply %56, %21 : tensor<ui64>
    %58 = "mhlo.convert"(%57) : (tensor<ui64>) -> tensor<ui32>
    %59 = mhlo.shift_right_logical %57, %23 : tensor<ui64>
    %60 = "mhlo.convert"(%59) : (tensor<ui64>) -> tensor<ui32>
    %61 = "mhlo.convert"(%55) : (tensor<ui32>) -> tensor<ui64>
    %62 = mhlo.multiply %61, %22 : tensor<ui64>
    %63 = "mhlo.convert"(%62) : (tensor<ui64>) -> tensor<ui32>
    %64 = mhlo.shift_right_logical %62, %23 : tensor<ui64>
    %65 = "mhlo.convert"(%64) : (tensor<ui64>) -> tensor<ui32>
    %66 = mhlo.xor %65, %49 : tensor<ui32>
    %67 = mhlo.xor %66, %12 : tensor<ui32>
    %68 = mhlo.xor %60, %44 : tensor<ui32>
    %69 = mhlo.xor %68, %20 : tensor<ui32>
    %70 = "mhlo.convert"(%67) : (tensor<ui32>) -> tensor<ui64>
    %71 = mhlo.multiply %70, %21 : tensor<ui64>
    %72 = "mhlo.convert"(%71) : (tensor<ui64>) -> tensor<ui32>
    %73 = mhlo.shift_right_logical %71, %23 : tensor<ui64>
    %74 = "mhlo.convert"(%73) : (tensor<ui64>) -> tensor<ui32>
    %75 = "mhlo.convert"(%69) : (tensor<ui32>) -> tensor<ui64>
    %76 = mhlo.multiply %75, %22 : tensor<ui64>
    %77 = "mhlo.convert"(%76) : (tensor<ui64>) -> tensor<ui32>
    %78 = mhlo.shift_right_logical %76, %23 : tensor<ui64>
    %79 = "mhlo.convert"(%78) : (tensor<ui64>) -> tensor<ui32>
    %80 = mhlo.xor %79, %63 : tensor<ui32>
    %81 = mhlo.xor %80, %11 : tensor<ui32>
    %82 = mhlo.xor %74, %58 : tensor<ui32>
    %83 = mhlo.xor %82, %19 : tensor<ui32>
    %84 = "mhlo.convert"(%81) : (tensor<ui32>) -> tensor<ui64>
    %85 = mhlo.multiply %84, %21 : tensor<ui64>
    %86 = "mhlo.convert"(%85) : (tensor<ui64>) -> tensor<ui32>
    %87 = mhlo.shift_right_logical %85, %23 : tensor<ui64>
    %88 = "mhlo.convert"(%87) : (tensor<ui64>) -> tensor<ui32>
    %89 = "mhlo.convert"(%83) : (tensor<ui32>) -> tensor<ui64>
    %90 = mhlo.multiply %89, %22 : tensor<ui64>
    %91 = "mhlo.convert"(%90) : (tensor<ui64>) -> tensor<ui32>
    %92 = mhlo.shift_right_logical %90, %23 : tensor<ui64>
    %93 = "mhlo.convert"(%92) : (tensor<ui64>) -> tensor<ui32>
    %94 = mhlo.xor %93, %77 : tensor<ui32>
    %95 = mhlo.xor %94, %10 : tensor<ui32>
    %96 = mhlo.xor %88, %72 : tensor<ui32>
    %97 = mhlo.xor %96, %18 : tensor<ui32>
    %98 = "mhlo.convert"(%95) : (tensor<ui32>) -> tensor<ui64>
    %99 = mhlo.multiply %98, %21 : tensor<ui64>
    %100 = "mhlo.convert"(%99) : (tensor<ui64>) -> tensor<ui32>
    %101 = mhlo.shift_right_logical %99, %23 : tensor<ui64>
    %102 = "mhlo.convert"(%101) : (tensor<ui64>) -> tensor<ui32>
    %103 = "mhlo.convert"(%97) : (tensor<ui32>) -> tensor<ui64>
    %104 = mhlo.multiply %103, %22 : tensor<ui64>
    %105 = "mhlo.convert"(%104) : (tensor<ui64>) -> tensor<ui32>
    %106 = mhlo.shift_right_logical %104, %23 : tensor<ui64>
    %107 = "mhlo.convert"(%106) : (tensor<ui64>) -> tensor<ui32>
    %108 = mhlo.xor %107, %91 : tensor<ui32>
    %109 = mhlo.xor %108, %9 : tensor<ui32>
    %110 = mhlo.xor %102, %86 : tensor<ui32>
    %111 = mhlo.xor %110, %17 : tensor<ui32>
    %112 = "mhlo.convert"(%109) : (tensor<ui32>) -> tensor<ui64>
    %113 = mhlo.multiply %112, %21 : tensor<ui64>
    %114 = "mhlo.convert"(%113) : (tensor<ui64>) -> tensor<ui32>
    %115 = mhlo.shift_right_logical %113, %23 : tensor<ui64>
    %116 = "mhlo.convert"(%115) : (tensor<ui64>) -> tensor<ui32>
    %117 = "mhlo.convert"(%111) : (tensor<ui32>) -> tensor<ui64>
    %118 = mhlo.multiply %117, %22 : tensor<ui64>
    %119 = "mhlo.convert"(%118) : (tensor<ui64>) -> tensor<ui32>
    %120 = mhlo.shift_right_logical %118, %23 : tensor<ui64>
    %121 = "mhlo.convert"(%120) : (tensor<ui64>) -> tensor<ui32>
    %122 = mhlo.xor %121, %105 : tensor<ui32>
    %123 = mhlo.xor %122, %8 : tensor<ui32>
    %124 = mhlo.xor %116, %100 : tensor<ui32>
    %125 = mhlo.xor %124, %16 : tensor<ui32>
    %126 = "mhlo.convert"(%123) : (tensor<ui32>) -> tensor<ui64>
    %127 = mhlo.multiply %126, %21 : tensor<ui64>
    %128 = "mhlo.convert"(%127) : (tensor<ui64>) -> tensor<ui32>
    %129 = mhlo.shift_right_logical %127, %23 : tensor<ui64>
    %130 = "mhlo.convert"(%129) : (tensor<ui64>) -> tensor<ui32>
    %131 = "mhlo.convert"(%125) : (tensor<ui32>) -> tensor<ui64>
    %132 = mhlo.multiply %131, %22 : tensor<ui64>
    %133 = "mhlo.convert"(%132) : (tensor<ui64>) -> tensor<ui32>
    %134 = mhlo.shift_right_logical %132, %23 : tensor<ui64>
    %135 = "mhlo.convert"(%134) : (tensor<ui64>) -> tensor<ui32>
    %136 = mhlo.xor %135, %119 : tensor<ui32>
    %137 = mhlo.xor %136, %7 : tensor<ui32>
    %138 = mhlo.xor %130, %114 : tensor<ui32>
    %139 = mhlo.xor %138, %15 : tensor<ui32>
    %140 = "mhlo.convert"(%137) : (tensor<ui32>) -> tensor<ui64>
    %141 = mhlo.multiply %140, %21 : tensor<ui64>
    %142 = "mhlo.convert"(%141) : (tensor<ui64>) -> tensor<ui32>
    %143 = mhlo.shift_right_logical %141, %23 : tensor<ui64>
    %144 = "mhlo.convert"(%143) : (tensor<ui64>) -> tensor<ui32>
    %145 = "mhlo.convert"(%139) : (tensor<ui32>) -> tensor<ui64>
    %146 = mhlo.multiply %145, %22 : tensor<ui64>
    %147 = mhlo.shift_right_logical %146, %23 : tensor<ui64>
    %148 = "mhlo.convert"(%147) : (tensor<ui64>) -> tensor<ui32>
    %149 = mhlo.xor %148, %133 : tensor<ui32>
    %150 = mhlo.xor %149, %6 : tensor<ui32>
    %151 = mhlo.xor %144, %128 : tensor<ui32>
    %152 = mhlo.xor %151, %14 : tensor<ui32>
    %153 = "mhlo.convert"(%150) : (tensor<ui32>) -> tensor<ui64>
    %154 = mhlo.multiply %153, %21 : tensor<ui64>
    %155 = mhlo.shift_right_logical %154, %23 : tensor<ui64>
    %156 = "mhlo.convert"(%155) : (tensor<ui64>) -> tensor<ui32>
    %157 = "mhlo.convert"(%152) : (tensor<ui32>) -> tensor<ui64>
    %158 = mhlo.multiply %157, %22 : tensor<ui64>
    %159 = "mhlo.convert"(%158) : (tensor<ui64>) -> tensor<ui32>
    %160 = mhlo.xor %156, %142 : tensor<ui32>
    %161 = mhlo.xor %160, %13 : tensor<ui32>
    %162 = "mhlo.convert"(%161) : (tensor<ui32>) -> tensor<ui64>
    %163 = mhlo.multiply %162, %22 : tensor<ui64>
    %164 = "mhlo.convert"(%163) : (tensor<ui64>) -> tensor<ui32>
    %165 = mhlo.shift_right_logical %163, %23 : tensor<ui64>
    %166 = "mhlo.convert"(%165) : (tensor<ui64>) -> tensor<ui32>
    %167 = mhlo.xor %166, %159 : tensor<ui32>
    %168 = mhlo.xor %167, %5 : tensor<ui32>
    %169 = "mhlo.convert"(%164) : (tensor<ui32>) -> tensor<ui64>
    %170 = mhlo.shift_left %169, %23 : tensor<ui64>
    %171 = "mhlo.convert"(%168) : (tensor<ui32>) -> tensor<ui64>
    %172 = mhlo.or %171, %170 : tensor<ui64>
    %173 = mhlo.shift_left %24, %23 : tensor<ui64>
    %174 = "mhlo.reshape"(%173) : (tensor<ui64>) -> tensor<1xui64>
    %175 = "mhlo.reshape"(%172) : (tensor<ui64>) -> tensor<1xui64>
    %176 = "mhlo.bitcast_convert"(%175) : (tensor<1xui64>) -> tensor<1xui64>
    %177 = "mhlo.bitcast_convert"(%174) : (tensor<1xui64>) -> tensor<1xui64>
    %178 = "mhlo.concatenate"(%176, %177) {dimension = 0 : i64} : (tensor<1xui64>, tensor<1xui64>) -> tensor<2xui64>
    %179 = "mhlo.rng_bit_generator"(%178) {rng_algorithm = 0 : i32} : (tensor<2xui64>) -> tuple<tensor<2xui64>, tensor<10xui32>>
    %180 = "mhlo.get_tuple_element"(%179) {index = 1 : i32} : (tuple<tensor<2xui64>, tensor<10xui32>>) -> tensor<10xui32>
    %181 = mhlo.shift_right_logical %180, %25 : tensor<10xui32>
    %182 = "mhlo.convert"(%181) : (tensor<10xui32>) -> tensor<10xf32>
    %183 = mhlo.multiply %182, %26 : tensor<10xf32>
    %184 = mhlo.multiply %183, %27 : tensor<10xf32>
    %185 = mhlo.add %184, %28 : tensor<10xf32>
    %186 = mhlo.multiply %185, %0 : tensor<10xf32>
    %187 = mhlo.add %186, %0 : tensor<10xf32>
    return %187 : tensor<10xf32>
  }
}