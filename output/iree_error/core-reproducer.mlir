// configuration: -pass-pipeline='builtin.func(iree-top-level-scf-to-cfg, shape-to-shape-lowering), convert-shape-to-std, builtin.func(canonicalize{  max-iterations=10 region-simplify=true top-down=true}), inline{default-pipeline=canonicalize{  max-iterations=10 region-simplify=true top-down=true} max-iterations=4 }, builtin.func(iree-mhlo-to-mhlo-preprocessing{extract-pad-from-conv=true order-conv-features=true}), iree-mhlo-legalize-input-types, builtin.func(canonicalize{  max-iterations=10 region-simplify=true top-down=true}, cse, iree-mhlo-to-linalg-ext, iree-mhlo-to-linalg-on-tensors), reconcile-unrealized-casts, builtin.func(canonicalize{  max-iterations=10 region-simplify=true top-down=true}), iree-mhlo-verify-compiler-input-legality, iree-import-public, iree-abi-wrap-entry-points, inline{default-pipeline=canonicalize{  max-iterations=10 region-simplify=true top-down=true} max-iterations=4 }, builtin.func(canonicalize{  max-iterations=10 region-simplify=true top-down=true}, cse), symbol-dce, builtin.func(iree-flow-convert-conv2d-1x1-to-matmul, iree-verify-input-legality, iree-util-simplify-global-accesses), util.initializer(iree-flow-convert-conv2d-1x1-to-matmul, iree-verify-input-legality, iree-util-simplify-global-accesses), iree-util-apply-patterns, iree-util-fold-globals, builtin.func(canonicalize{  max-iterations=10 region-simplify=true top-down=true}, cse, iree-flow-pad-tensor-to-subtensor-insert, convert-elementwise-to-linalg, linalg-fold-unit-extent-dims{fold-one-trip-loops-only=false}, iree-flow-interchange-generic-ops, canonicalize{  max-iterations=10 region-simplify=true top-down=true}, resolve-shaped-type-result-dims, iree-flow-fusion-of-tensor-ops, cse, iree-flow-convert-to-flow-before-dispatch-formation, canonicalize{  max-iterations=10 region-simplify=true top-down=true}, iree-flow-dispatch-linalg-on-tensors-pass, resolve-shaped-type-result-dims, iree-flow-convert-to-flow-after-dispatch-formation, canonicalize{  max-iterations=10 region-simplify=true top-down=true}, resolve-shaped-type-result-dims, iree-flow-convert-to-flow-after-dispatch-formation, canonicalize{  max-iterations=10 region-simplify=true top-down=true}), util.initializer(canonicalize{  max-iterations=10 region-simplify=true top-down=true}, cse, iree-flow-pad-tensor-to-subtensor-insert, convert-elementwise-to-linalg, linalg-fold-unit-extent-dims{fold-one-trip-loops-only=false}, iree-flow-interchange-generic-ops, canonicalize{  max-iterations=10 region-simplify=true top-down=true}, resolve-shaped-type-result-dims, iree-flow-fusion-of-tensor-ops, cse, iree-flow-convert-to-flow-before-dispatch-formation, canonicalize{  max-iterations=10 region-simplify=true top-down=true}, iree-flow-dispatch-linalg-on-tensors-pass, resolve-shaped-type-result-dims, iree-flow-convert-to-flow-after-dispatch-formation, canonicalize{  max-iterations=10 region-simplify=true top-down=true}, resolve-shaped-type-result-dims, iree-flow-convert-to-flow-after-dispatch-formation, canonicalize{  max-iterations=10 region-simplify=true top-down=true}), iree-flow-outline-dispatch-regions, builtin.func(canonicalize{  max-iterations=10 region-simplify=true top-down=true}), util.initializer(canonicalize{  max-iterations=10 region-simplify=true top-down=true}), iree-flow-deduplicate-executables, builtin.func(canonicalize{  max-iterations=10 region-simplify=true top-down=true}, cse), flow.executable(canonicalize{  max-iterations=10 region-simplify=true top-down=true}, cse), util.initializer(canonicalize{  max-iterations=10 region-simplify=true top-down=true}, cse), symbol-dce, iree-stream-verify-input, iree-stream-outline-constants, canonicalize{  max-iterations=10 region-simplify=true top-down=true}, cse, iree-util-apply-patterns, iree-util-fold-globals, iree-util-fuse-globals, builtin.func(iree-util-simplify-global-accesses), util.initializer(iree-util-simplify-global-accesses), iree-stream-conversion, iree-stream-verify-lowering-to-tensors, canonicalize{  max-iterations=10 region-simplify=true top-down=true}, cse, iree-util-apply-patterns, iree-util-fold-globals, iree-util-fuse-globals, builtin.func(iree-util-simplify-global-accesses), util.initializer(iree-util-simplify-global-accesses), iree-util-combine-initializers, builtin.func(iree-stream-encode-tensors), util.initializer(iree-stream-encode-tensors), canonicalize{  max-iterations=10 region-simplify=true top-down=true}, cse, iree-util-apply-patterns, iree-util-fold-globals, iree-util-fuse-globals, builtin.func(iree-util-simplify-global-accesses, iree-stream-materialize-copy-on-write), util.initializer(iree-util-simplify-global-accesses, iree-stream-materialize-copy-on-write), iree-stream-elide-async-copies, iree-stream-refine-usage, builtin.func(iree-stream-schedule-execution, iree-stream-schedule-concurrency), util.initializer(iree-stream-schedule-execution, iree-stream-schedule-concurrency), iree-stream-propagate-timepoints, canonicalize{  max-iterations=10 region-simplify=true top-down=true}, cse, iree-util-apply-patterns, iree-util-fold-globals, iree-util-fuse-globals, builtin.func(iree-util-simplify-global-accesses), util.initializer(iree-util-simplify-global-accesses), iree-stream-verify-lowering-to-async, builtin.func(iree-stream-schedule-allocation, iree-stream-pack-constants, iree-stream-pack-allocations, iree-stream-layout-slices), util.initializer(iree-stream-schedule-allocation, iree-stream-pack-constants, iree-stream-pack-allocations, iree-stream-layout-slices), iree-stream-propagate-subviews, canonicalize{  max-iterations=10 region-simplify=true top-down=true}, cse, iree-util-apply-patterns, iree-util-fold-globals, iree-util-fuse-globals, builtin.func(iree-util-simplify-global-accesses), util.initializer(iree-util-simplify-global-accesses), iree-stream-verify-lowering-to-cmd, canonicalize{  max-iterations=10 region-simplify=true top-down=true}, iree-stream-fuse-dispatch-bindings{alias-mutable-bindings=false}, cse, iree-stream-fold-uniform-operands, iree-stream-annotate-dispatch-arguments, canonicalize{  max-iterations=10 region-simplify=true top-down=true}, cse, iree-util-apply-patterns, iree-util-fold-globals, iree-util-fuse-globals, builtin.func(iree-util-simplify-global-accesses), util.initializer(iree-util-simplify-global-accesses), symbol-dce, canonicalize{  max-iterations=10 region-simplify=true top-down=true}, cse, iree-util-apply-patterns, iree-util-fold-globals, iree-util-fuse-globals, builtin.func(iree-util-simplify-global-accesses), util.initializer(iree-util-simplify-global-accesses), iree-hal-assign-target-devices{targets=vulkan-spirv}, iree-hal-verify-target-environment, iree-hal-materialize-interfaces2, hal.executable(iree-hal-translate-executables), iree-hal-conversion, canonicalize{  max-iterations=10 region-simplify=true top-down=true}, cse, iree-util-apply-patterns, iree-util-fold-globals, iree-util-fuse-globals, builtin.func(iree-util-simplify-global-accesses), util.initializer(iree-util-simplify-global-accesses), iree-hal-link-executables, iree-hal-resolve-entry-point-ordinals, iree-hal-materialize-resource-caches, builtin.func(iree-hal-inline-device-switches), util.initializer(iree-hal-inline-device-switches), iree-hal-memoize-device-queries, canonicalize{  max-iterations=10 region-simplify=true top-down=true}, cse, iree-util-apply-patterns, iree-util-fold-globals, iree-util-fuse-globals, builtin.func(iree-util-simplify-global-accesses, iree-hal-elide-redundant-commands), util.initializer(iree-util-simplify-global-accesses, iree-hal-elide-redundant-commands), lower-affine, iree-util-combine-initializers, canonicalize{  max-iterations=10 region-simplify=true top-down=true}, cse, iree-util-apply-patterns, iree-util-fold-globals, iree-util-fuse-globals, builtin.func(iree-util-simplify-global-accesses), hal.executable(iree-hal-serialize-executables), util.initializer(iree-util-simplify-global-accesses), symbol-dce, builtin.func(loop-coalescing, loop-invariant-code-motion, convert-scf-to-std), util.initializer(loop-invariant-code-motion, convert-scf-to-std), canonicalize{  max-iterations=10 region-simplify=true top-down=true}, cse, iree-vm-conversion, vm.module(iree-vm-hoist-inlined-rodata, iree-vm-deduplicate-rodata, iree-vm-global-initialization), inline{default-pipeline=canonicalize{  max-iterations=10 region-simplify=true top-down=true} max-iterations=4 }, canonicalize{  max-iterations=10 region-simplify=true top-down=true}, cse, symbol-dce, vm.module(iree-vm-sink-defining-ops), iree-util-drop-compiler-hints' -verify-each
module attributes {tf.versions = {bad_consumers = [], min_consumer = 0 : i32, producer = 1087 : i32}}  {
  func @main() -> tensor<10xf32> attributes {tf.entry_function = {control_outputs = "", inputs = "", outputs = "identity_RetVal"}} {
    %0 = mhlo.constant dense<4.000000e+00> : tensor<10xf32> loc(#loc2)
    %1 = mhlo.constant dense<1> : tensor<ui64> loc(#loc3)
    %2 = mhlo.constant dense<2> : tensor<ui64> loc(#loc4)
    %3 = mhlo.constant dense<1053357856> : tensor<ui32> loc(#loc5)
    %4 = mhlo.constant dense<38149673> : tensor<ui32> loc(#loc6)
    %5 = mhlo.constant dense<3468443297> : tensor<ui32> loc(#loc7)
    %6 = mhlo.constant dense<2454539055> : tensor<ui32> loc(#loc8)
    %7 = mhlo.constant dense<4095070582> : tensor<ui32> loc(#loc9)
    %8 = mhlo.constant dense<1440634813> : tensor<ui32> loc(#loc10)
    %9 = mhlo.constant dense<3081166340> : tensor<ui32> loc(#loc11)
    %10 = mhlo.constant dense<426730571> : tensor<ui32> loc(#loc12)
    %11 = mhlo.constant dense<2067262098> : tensor<ui32> loc(#loc13)
    %12 = mhlo.constant dense<3707793625> : tensor<ui32> loc(#loc14)
    %13 = mhlo.constant dense<3716387409> : tensor<ui32> loc(#loc15)
    %14 = mhlo.constant dense<572253132> : tensor<ui32> loc(#loc16)
    %15 = mhlo.constant dense<1723086151> : tensor<ui32> loc(#loc17)
    %16 = mhlo.constant dense<2873919170> : tensor<ui32> loc(#loc18)
    %17 = mhlo.constant dense<4024752189> : tensor<ui32> loc(#loc19)
    %18 = mhlo.constant dense<880617912> : tensor<ui32> loc(#loc20)
    %19 = mhlo.constant dense<2031450931> : tensor<ui32> loc(#loc21)
    %20 = mhlo.constant dense<3182283950> : tensor<ui32> loc(#loc22)
    %21 = mhlo.constant dense<3528531795> : tensor<ui64> loc(#loc23)
    %22 = mhlo.constant dense<3449720151> : tensor<ui64> loc(#loc24)
    %23 = mhlo.constant dense<32> : tensor<ui64> loc(#loc25)
    %24 = mhlo.constant dense<0> : tensor<ui64> loc(#loc26)
    %25 = mhlo.constant dense<9> : tensor<10xui32> loc(#loc27)
    %26 = mhlo.constant dense<1.1920929E-7> : tensor<10xf32> loc(#loc28)
    %27 = mhlo.constant dense<1.000000e+00> : tensor<10xf32> loc(#loc29)
    %28 = mhlo.constant dense<0.000000e+00> : tensor<10xf32> loc(#loc30)
    %29 = mhlo.shift_left %2, %23 : tensor<ui64> loc(#loc31)
    %30 = mhlo.or %29, %1 : tensor<ui64> loc(#loc32)
    %31 = "mhlo.convert"(%30) : (tensor<ui64>) -> tensor<ui32> loc(#loc33)
    %32 = mhlo.shift_right_logical %30, %23 : tensor<ui64> loc(#loc34)
    %33 = "mhlo.convert"(%32) : (tensor<ui64>) -> tensor<ui32> loc(#loc35)
    %34 = "mhlo.convert"(%31) : (tensor<ui32>) -> tensor<ui64> loc(#loc36)
    %35 = "mhlo.convert"(%33) : (tensor<ui32>) -> tensor<ui64> loc(#loc37)
    %36 = "mhlo.convert"(%34) : (tensor<ui64>) -> tensor<ui32> loc(#loc38)
    %37 = mhlo.shift_right_logical %34, %23 : tensor<ui64> loc(#loc39)
    %38 = "mhlo.convert"(%37) : (tensor<ui64>) -> tensor<ui32> loc(#loc40)
    %39 = "mhlo.convert"(%35) : (tensor<ui64>) -> tensor<ui32> loc(#loc41)
    %40 = mhlo.shift_right_logical %35, %23 : tensor<ui64> loc(#loc42)
    %41 = "mhlo.convert"(%40) : (tensor<ui64>) -> tensor<ui32> loc(#loc43)
    %42 = "mhlo.convert"(%36) : (tensor<ui32>) -> tensor<ui64> loc(#loc44)
    %43 = mhlo.multiply %42, %21 : tensor<ui64> loc(#loc45)
    %44 = "mhlo.convert"(%43) : (tensor<ui64>) -> tensor<ui32> loc(#loc46)
    %45 = mhlo.shift_right_logical %43, %23 : tensor<ui64> loc(#loc47)
    %46 = "mhlo.convert"(%45) : (tensor<ui64>) -> tensor<ui32> loc(#loc48)
    %47 = "mhlo.convert"(%39) : (tensor<ui32>) -> tensor<ui64> loc(#loc49)
    %48 = mhlo.multiply %47, %22 : tensor<ui64> loc(#loc50)
    %49 = "mhlo.convert"(%48) : (tensor<ui64>) -> tensor<ui32> loc(#loc51)
    %50 = mhlo.shift_right_logical %48, %23 : tensor<ui64> loc(#loc52)
    %51 = "mhlo.convert"(%50) : (tensor<ui64>) -> tensor<ui32> loc(#loc53)
    %52 = mhlo.xor %51, %38 : tensor<ui32> loc(#loc54)
    %53 = mhlo.xor %52, %3 : tensor<ui32> loc(#loc55)
    %54 = mhlo.xor %46, %41 : tensor<ui32> loc(#loc56)
    %55 = mhlo.xor %54, %4 : tensor<ui32> loc(#loc57)
    %56 = "mhlo.convert"(%53) : (tensor<ui32>) -> tensor<ui64> loc(#loc58)
    %57 = mhlo.multiply %56, %21 : tensor<ui64> loc(#loc59)
    %58 = "mhlo.convert"(%57) : (tensor<ui64>) -> tensor<ui32> loc(#loc60)
    %59 = mhlo.shift_right_logical %57, %23 : tensor<ui64> loc(#loc61)
    %60 = "mhlo.convert"(%59) : (tensor<ui64>) -> tensor<ui32> loc(#loc62)
    %61 = "mhlo.convert"(%55) : (tensor<ui32>) -> tensor<ui64> loc(#loc63)
    %62 = mhlo.multiply %61, %22 : tensor<ui64> loc(#loc64)
    %63 = "mhlo.convert"(%62) : (tensor<ui64>) -> tensor<ui32> loc(#loc65)
    %64 = mhlo.shift_right_logical %62, %23 : tensor<ui64> loc(#loc66)
    %65 = "mhlo.convert"(%64) : (tensor<ui64>) -> tensor<ui32> loc(#loc67)
    %66 = mhlo.xor %65, %49 : tensor<ui32> loc(#loc68)
    %67 = mhlo.xor %66, %12 : tensor<ui32> loc(#loc69)
    %68 = mhlo.xor %60, %44 : tensor<ui32> loc(#loc70)
    %69 = mhlo.xor %68, %20 : tensor<ui32> loc(#loc71)
    %70 = "mhlo.convert"(%67) : (tensor<ui32>) -> tensor<ui64> loc(#loc72)
    %71 = mhlo.multiply %70, %21 : tensor<ui64> loc(#loc73)
    %72 = "mhlo.convert"(%71) : (tensor<ui64>) -> tensor<ui32> loc(#loc74)
    %73 = mhlo.shift_right_logical %71, %23 : tensor<ui64> loc(#loc75)
    %74 = "mhlo.convert"(%73) : (tensor<ui64>) -> tensor<ui32> loc(#loc76)
    %75 = "mhlo.convert"(%69) : (tensor<ui32>) -> tensor<ui64> loc(#loc77)
    %76 = mhlo.multiply %75, %22 : tensor<ui64> loc(#loc78)
    %77 = "mhlo.convert"(%76) : (tensor<ui64>) -> tensor<ui32> loc(#loc79)
    %78 = mhlo.shift_right_logical %76, %23 : tensor<ui64> loc(#loc80)
    %79 = "mhlo.convert"(%78) : (tensor<ui64>) -> tensor<ui32> loc(#loc81)
    %80 = mhlo.xor %79, %63 : tensor<ui32> loc(#loc82)
    %81 = mhlo.xor %80, %11 : tensor<ui32> loc(#loc83)
    %82 = mhlo.xor %74, %58 : tensor<ui32> loc(#loc84)
    %83 = mhlo.xor %82, %19 : tensor<ui32> loc(#loc85)
    %84 = "mhlo.convert"(%81) : (tensor<ui32>) -> tensor<ui64> loc(#loc86)
    %85 = mhlo.multiply %84, %21 : tensor<ui64> loc(#loc87)
    %86 = "mhlo.convert"(%85) : (tensor<ui64>) -> tensor<ui32> loc(#loc88)
    %87 = mhlo.shift_right_logical %85, %23 : tensor<ui64> loc(#loc89)
    %88 = "mhlo.convert"(%87) : (tensor<ui64>) -> tensor<ui32> loc(#loc90)
    %89 = "mhlo.convert"(%83) : (tensor<ui32>) -> tensor<ui64> loc(#loc91)
    %90 = mhlo.multiply %89, %22 : tensor<ui64> loc(#loc92)
    %91 = "mhlo.convert"(%90) : (tensor<ui64>) -> tensor<ui32> loc(#loc93)
    %92 = mhlo.shift_right_logical %90, %23 : tensor<ui64> loc(#loc94)
    %93 = "mhlo.convert"(%92) : (tensor<ui64>) -> tensor<ui32> loc(#loc95)
    %94 = mhlo.xor %93, %77 : tensor<ui32> loc(#loc96)
    %95 = mhlo.xor %94, %10 : tensor<ui32> loc(#loc97)
    %96 = mhlo.xor %88, %72 : tensor<ui32> loc(#loc98)
    %97 = mhlo.xor %96, %18 : tensor<ui32> loc(#loc99)
    %98 = "mhlo.convert"(%95) : (tensor<ui32>) -> tensor<ui64> loc(#loc100)
    %99 = mhlo.multiply %98, %21 : tensor<ui64> loc(#loc101)
    %100 = "mhlo.convert"(%99) : (tensor<ui64>) -> tensor<ui32> loc(#loc102)
    %101 = mhlo.shift_right_logical %99, %23 : tensor<ui64> loc(#loc103)
    %102 = "mhlo.convert"(%101) : (tensor<ui64>) -> tensor<ui32> loc(#loc104)
    %103 = "mhlo.convert"(%97) : (tensor<ui32>) -> tensor<ui64> loc(#loc105)
    %104 = mhlo.multiply %103, %22 : tensor<ui64> loc(#loc106)
    %105 = "mhlo.convert"(%104) : (tensor<ui64>) -> tensor<ui32> loc(#loc107)
    %106 = mhlo.shift_right_logical %104, %23 : tensor<ui64> loc(#loc108)
    %107 = "mhlo.convert"(%106) : (tensor<ui64>) -> tensor<ui32> loc(#loc109)
    %108 = mhlo.xor %107, %91 : tensor<ui32> loc(#loc110)
    %109 = mhlo.xor %108, %9 : tensor<ui32> loc(#loc111)
    %110 = mhlo.xor %102, %86 : tensor<ui32> loc(#loc112)
    %111 = mhlo.xor %110, %17 : tensor<ui32> loc(#loc113)
    %112 = "mhlo.convert"(%109) : (tensor<ui32>) -> tensor<ui64> loc(#loc114)
    %113 = mhlo.multiply %112, %21 : tensor<ui64> loc(#loc115)
    %114 = "mhlo.convert"(%113) : (tensor<ui64>) -> tensor<ui32> loc(#loc116)
    %115 = mhlo.shift_right_logical %113, %23 : tensor<ui64> loc(#loc117)
    %116 = "mhlo.convert"(%115) : (tensor<ui64>) -> tensor<ui32> loc(#loc118)
    %117 = "mhlo.convert"(%111) : (tensor<ui32>) -> tensor<ui64> loc(#loc119)
    %118 = mhlo.multiply %117, %22 : tensor<ui64> loc(#loc120)
    %119 = "mhlo.convert"(%118) : (tensor<ui64>) -> tensor<ui32> loc(#loc121)
    %120 = mhlo.shift_right_logical %118, %23 : tensor<ui64> loc(#loc122)
    %121 = "mhlo.convert"(%120) : (tensor<ui64>) -> tensor<ui32> loc(#loc123)
    %122 = mhlo.xor %121, %105 : tensor<ui32> loc(#loc124)
    %123 = mhlo.xor %122, %8 : tensor<ui32> loc(#loc125)
    %124 = mhlo.xor %116, %100 : tensor<ui32> loc(#loc126)
    %125 = mhlo.xor %124, %16 : tensor<ui32> loc(#loc127)
    %126 = "mhlo.convert"(%123) : (tensor<ui32>) -> tensor<ui64> loc(#loc128)
    %127 = mhlo.multiply %126, %21 : tensor<ui64> loc(#loc129)
    %128 = "mhlo.convert"(%127) : (tensor<ui64>) -> tensor<ui32> loc(#loc130)
    %129 = mhlo.shift_right_logical %127, %23 : tensor<ui64> loc(#loc131)
    %130 = "mhlo.convert"(%129) : (tensor<ui64>) -> tensor<ui32> loc(#loc132)
    %131 = "mhlo.convert"(%125) : (tensor<ui32>) -> tensor<ui64> loc(#loc133)
    %132 = mhlo.multiply %131, %22 : tensor<ui64> loc(#loc134)
    %133 = "mhlo.convert"(%132) : (tensor<ui64>) -> tensor<ui32> loc(#loc135)
    %134 = mhlo.shift_right_logical %132, %23 : tensor<ui64> loc(#loc136)
    %135 = "mhlo.convert"(%134) : (tensor<ui64>) -> tensor<ui32> loc(#loc137)
    %136 = mhlo.xor %135, %119 : tensor<ui32> loc(#loc138)
    %137 = mhlo.xor %136, %7 : tensor<ui32> loc(#loc139)
    %138 = mhlo.xor %130, %114 : tensor<ui32> loc(#loc140)
    %139 = mhlo.xor %138, %15 : tensor<ui32> loc(#loc141)
    %140 = "mhlo.convert"(%137) : (tensor<ui32>) -> tensor<ui64> loc(#loc142)
    %141 = mhlo.multiply %140, %21 : tensor<ui64> loc(#loc143)
    %142 = "mhlo.convert"(%141) : (tensor<ui64>) -> tensor<ui32> loc(#loc144)
    %143 = mhlo.shift_right_logical %141, %23 : tensor<ui64> loc(#loc145)
    %144 = "mhlo.convert"(%143) : (tensor<ui64>) -> tensor<ui32> loc(#loc146)
    %145 = "mhlo.convert"(%139) : (tensor<ui32>) -> tensor<ui64> loc(#loc147)
    %146 = mhlo.multiply %145, %22 : tensor<ui64> loc(#loc148)
    %147 = mhlo.shift_right_logical %146, %23 : tensor<ui64> loc(#loc149)
    %148 = "mhlo.convert"(%147) : (tensor<ui64>) -> tensor<ui32> loc(#loc150)
    %149 = mhlo.xor %148, %133 : tensor<ui32> loc(#loc151)
    %150 = mhlo.xor %149, %6 : tensor<ui32> loc(#loc152)
    %151 = mhlo.xor %144, %128 : tensor<ui32> loc(#loc153)
    %152 = mhlo.xor %151, %14 : tensor<ui32> loc(#loc154)
    %153 = "mhlo.convert"(%150) : (tensor<ui32>) -> tensor<ui64> loc(#loc155)
    %154 = mhlo.multiply %153, %21 : tensor<ui64> loc(#loc156)
    %155 = mhlo.shift_right_logical %154, %23 : tensor<ui64> loc(#loc157)
    %156 = "mhlo.convert"(%155) : (tensor<ui64>) -> tensor<ui32> loc(#loc158)
    %157 = "mhlo.convert"(%152) : (tensor<ui32>) -> tensor<ui64> loc(#loc159)
    %158 = mhlo.multiply %157, %22 : tensor<ui64> loc(#loc160)
    %159 = "mhlo.convert"(%158) : (tensor<ui64>) -> tensor<ui32> loc(#loc161)
    %160 = mhlo.xor %156, %142 : tensor<ui32> loc(#loc162)
    %161 = mhlo.xor %160, %13 : tensor<ui32> loc(#loc163)
    %162 = "mhlo.convert"(%161) : (tensor<ui32>) -> tensor<ui64> loc(#loc164)
    %163 = mhlo.multiply %162, %22 : tensor<ui64> loc(#loc165)
    %164 = "mhlo.convert"(%163) : (tensor<ui64>) -> tensor<ui32> loc(#loc166)
    %165 = mhlo.shift_right_logical %163, %23 : tensor<ui64> loc(#loc167)
    %166 = "mhlo.convert"(%165) : (tensor<ui64>) -> tensor<ui32> loc(#loc168)
    %167 = mhlo.xor %166, %159 : tensor<ui32> loc(#loc169)
    %168 = mhlo.xor %167, %5 : tensor<ui32> loc(#loc170)
    %169 = "mhlo.convert"(%164) : (tensor<ui32>) -> tensor<ui64> loc(#loc171)
    %170 = mhlo.shift_left %169, %23 : tensor<ui64> loc(#loc172)
    %171 = "mhlo.convert"(%168) : (tensor<ui32>) -> tensor<ui64> loc(#loc173)
    %172 = mhlo.or %171, %170 : tensor<ui64> loc(#loc174)
    %173 = mhlo.shift_left %24, %23 : tensor<ui64> loc(#loc175)
    %174 = "mhlo.reshape"(%173) : (tensor<ui64>) -> tensor<1xui64> loc(#loc176)
    %175 = "mhlo.reshape"(%172) : (tensor<ui64>) -> tensor<1xui64> loc(#loc177)
    %176 = "mhlo.bitcast_convert"(%175) : (tensor<1xui64>) -> tensor<1xui64> loc(#loc178)
    %177 = "mhlo.bitcast_convert"(%174) : (tensor<1xui64>) -> tensor<1xui64> loc(#loc179)
    %178 = "mhlo.concatenate"(%176, %177) {dimension = 0 : i64} : (tensor<1xui64>, tensor<1xui64>) -> tensor<2xui64> loc(#loc180)
    %179 = "mhlo.rng_bit_generator"(%178) {rng_algorithm = 0 : i32} : (tensor<2xui64>) -> tuple<tensor<2xui64>, tensor<10xui32>> loc(#loc181)
    %180 = "mhlo.get_tuple_element"(%179) {index = 1 : i32} : (tuple<tensor<2xui64>, tensor<10xui32>>) -> tensor<10xui32> loc(#loc182)
    %181 = mhlo.shift_right_logical %180, %25 : tensor<10xui32> loc(#loc183)
    %182 = "mhlo.convert"(%181) : (tensor<10xui32>) -> tensor<10xf32> loc(#loc184)
    %183 = mhlo.multiply %182, %26 : tensor<10xf32> loc(#loc185)
    %184 = mhlo.multiply %183, %27 : tensor<10xf32> loc(#loc186)
    %185 = mhlo.add %184, %28 : tensor<10xf32> loc(#loc187)
    %186 = mhlo.multiply %185, %0 : tensor<10xf32> loc(#loc188)
    %187 = mhlo.add %186, %0 : tensor<10xf32> loc(#loc189)
    return %187 : tensor<10xf32> loc(#loc190)
  } loc(#loc1)
} loc(#loc0)
#loc0 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":1:1)
#loc1 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":2:3)
#loc2 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":3:10)
#loc3 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":4:10)
#loc4 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":5:10)
#loc5 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":6:10)
#loc6 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":7:10)
#loc7 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":8:10)
#loc8 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":9:10)
#loc9 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":10:10)
#loc10 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":11:10)
#loc11 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":12:10)
#loc12 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":13:11)
#loc13 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":14:11)
#loc14 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":15:11)
#loc15 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":16:11)
#loc16 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":17:11)
#loc17 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":18:11)
#loc18 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":19:11)
#loc19 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":20:11)
#loc20 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":21:11)
#loc21 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":22:11)
#loc22 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":23:11)
#loc23 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":24:11)
#loc24 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":25:11)
#loc25 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":26:11)
#loc26 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":27:11)
#loc27 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":28:11)
#loc28 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":29:11)
#loc29 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":30:11)
#loc30 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":31:11)
#loc31 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":32:11)
#loc32 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":33:11)
#loc33 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":34:11)
#loc34 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":35:11)
#loc35 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":36:11)
#loc36 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":37:11)
#loc37 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":38:11)
#loc38 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":39:11)
#loc39 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":40:11)
#loc40 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":41:11)
#loc41 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":42:11)
#loc42 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":43:11)
#loc43 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":44:11)
#loc44 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":45:11)
#loc45 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":46:11)
#loc46 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":47:11)
#loc47 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":48:11)
#loc48 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":49:11)
#loc49 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":50:11)
#loc50 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":51:11)
#loc51 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":52:11)
#loc52 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":53:11)
#loc53 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":54:11)
#loc54 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":55:11)
#loc55 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":56:11)
#loc56 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":57:11)
#loc57 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":58:11)
#loc58 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":59:11)
#loc59 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":60:11)
#loc60 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":61:11)
#loc61 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":62:11)
#loc62 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":63:11)
#loc63 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":64:11)
#loc64 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":65:11)
#loc65 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":66:11)
#loc66 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":67:11)
#loc67 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":68:11)
#loc68 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":69:11)
#loc69 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":70:11)
#loc70 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":71:11)
#loc71 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":72:11)
#loc72 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":73:11)
#loc73 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":74:11)
#loc74 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":75:11)
#loc75 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":76:11)
#loc76 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":77:11)
#loc77 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":78:11)
#loc78 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":79:11)
#loc79 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":80:11)
#loc80 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":81:11)
#loc81 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":82:11)
#loc82 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":83:11)
#loc83 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":84:11)
#loc84 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":85:11)
#loc85 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":86:11)
#loc86 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":87:11)
#loc87 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":88:11)
#loc88 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":89:11)
#loc89 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":90:11)
#loc90 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":91:11)
#loc91 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":92:11)
#loc92 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":93:11)
#loc93 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":94:11)
#loc94 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":95:11)
#loc95 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":96:11)
#loc96 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":97:11)
#loc97 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":98:11)
#loc98 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":99:11)
#loc99 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":100:11)
#loc100 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":101:11)
#loc101 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":102:11)
#loc102 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":103:12)
#loc103 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":104:12)
#loc104 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":105:12)
#loc105 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":106:12)
#loc106 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":107:12)
#loc107 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":108:12)
#loc108 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":109:12)
#loc109 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":110:12)
#loc110 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":111:12)
#loc111 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":112:12)
#loc112 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":113:12)
#loc113 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":114:12)
#loc114 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":115:12)
#loc115 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":116:12)
#loc116 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":117:12)
#loc117 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":118:12)
#loc118 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":119:12)
#loc119 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":120:12)
#loc120 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":121:12)
#loc121 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":122:12)
#loc122 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":123:12)
#loc123 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":124:12)
#loc124 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":125:12)
#loc125 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":126:12)
#loc126 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":127:12)
#loc127 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":128:12)
#loc128 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":129:12)
#loc129 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":130:12)
#loc130 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":131:12)
#loc131 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":132:12)
#loc132 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":133:12)
#loc133 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":134:12)
#loc134 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":135:12)
#loc135 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":136:12)
#loc136 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":137:12)
#loc137 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":138:12)
#loc138 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":139:12)
#loc139 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":140:12)
#loc140 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":141:12)
#loc141 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":142:12)
#loc142 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":143:12)
#loc143 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":144:12)
#loc144 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":145:12)
#loc145 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":146:12)
#loc146 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":147:12)
#loc147 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":148:12)
#loc148 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":149:12)
#loc149 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":150:12)
#loc150 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":151:12)
#loc151 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":152:12)
#loc152 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":153:12)
#loc153 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":154:12)
#loc154 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":155:12)
#loc155 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":156:12)
#loc156 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":157:12)
#loc157 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":158:12)
#loc158 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":159:12)
#loc159 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":160:12)
#loc160 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":161:12)
#loc161 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":162:12)
#loc162 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":163:12)
#loc163 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":164:12)
#loc164 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":165:12)
#loc165 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":166:12)
#loc166 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":167:12)
#loc167 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":168:12)
#loc168 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":169:12)
#loc169 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":170:12)
#loc170 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":171:12)
#loc171 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":172:12)
#loc172 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":173:12)
#loc173 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":174:12)
#loc174 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":175:12)
#loc175 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":176:12)
#loc176 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":177:12)
#loc177 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":178:12)
#loc178 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":179:12)
#loc179 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":180:12)
#loc180 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":181:12)
#loc181 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":182:12)
#loc182 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":183:12)
#loc183 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":184:12)
#loc184 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":185:12)
#loc185 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":186:12)
#loc186 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":187:12)
#loc187 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":188:12)
#loc188 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":189:12)
#loc189 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":190:12)
#loc190 = loc("/home/zp/chopper/output/stateless_random_uniform_mhlo.mlir":191:5)
